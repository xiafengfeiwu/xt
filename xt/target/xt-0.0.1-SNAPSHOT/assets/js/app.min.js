function initRipplesWithArrive() {
    $(document).arrive(withRipples,
    function() {
        initRipples()
    })
}
function initRipples() {
    $(withRipples).ripples()
}
angular.module("ngPlaceholders", []).factory("PlaceholderTextService",
function() {
    function a(a, b) {
        return Math.floor(Math.random() * (b - a + 1)) + a
    }
    var b = ["lorem"],
    c = {
        first_name: ["Aaliyah"],
        last_name: ["Abbott"]
    },
    d = ["md-menu", "md-arrow-drop-down", "md-flag", "md-home", "md-warning", "md-play-circle-fill", "md-forum", "md-content-paste", "md-battery-80", "md-format-textdirection-l-to-r", "md-folder-open", "md-desktop-windows", "md-collections", "md-directions-bike", "md-apps", "md-phone-in-talk", "md-people", "md-star-half", "md-arrow-drop-down", "md-file-download md-lg", "md-3d-rotation", "md-accessibility", "md-account-balance", "md-account-balance-wallet", "md-account-box", "md-account-child", "md-account-circle", "md-add-shopping-cart", "md-alarm", "md-alarm-add", "md-alarm-off", "md-alarm-on", "md-android", "md-announcement", "md-aspect-ratio", "md-assessment", "md-assignment", "md-assignment-ind", "md-assignment-late", "md-assignment-return", "md-assignment-returned", "md-assignment-turned-in", "md-autorenew", "md-backup", "md-book", "md-bookmark", "md-bookmark-outline", "md-bug-report", "md-cached", "md-class", "md-credit-card", "md-dashboard", "md-delete", "md-description", "md-dns", "md-done", "md-done-all", "md-event", "md-exit-to-app", "md-explore", "md-extension", "md-face-unlock", "md-favorite", "md-favorite-outline", "md-find-in-page", "md-find-replace", "md-flip-to-back", "md-flip-to-front", "md-get-app", "md-grade", "md-group-work", "md-help", "md-highlight-remove", "md-history", "md-home", "md-https", "md-info", "md-info-outline", "md-input", "md-invert-colors", "md-label", "md-label-outline", "md-language", "md-launch", "md-list", "md-lock", "md-lock-open", "md-lock-outline", "md-loyalty", "md-markunread-mailbox", "md-note-add", "md-open-in-browser", "md-open-in-new", "md-open-with", "md-pageview", "md-payment", "md-perm-camera-mic", "md-perm-contact-cal", "md-perm-data-setting", "md-perm-device-info", "md-perm-identity", "md-perm-media", "md-perm-phone-msg", "md-perm-scan-wifi", "md-picture-in-picture", "md-polymer", "md-print", "md-query-builder", "md-question-answer", "md-receipt", "md-redeem", "md-report-problem", "md-restore", "md-room", "md-schedule", "md-search", "md-settings", "md-settings-applications", "md-settings-backup-restore", "md-settings-bluetooth", "md-settings-cell", "md-settings-display", "md-settings-ethernet", "md-settings-input-antenna", "md-settings-input-component", "md-settings-input-composite", "md-settings-input-hdmi", "md-settings-input-svideo", "md-settings-overscan", "md-settings-phone", "md-settings-power", "md-settings-remote", "md-settings-voice", "md-shop", "md-shopping-basket", "md-shopping-cart", "md-shop-two", "md-speaker-notes", "md-spellcheck", "md-star-rate", "md-stars", "md-store", "md-subject", "md-swap-horiz", "md-swap-vert", "md-swap-vert-circle", "md-system-update-tv", "md-tab", "md-tab-unselected", "md-theaters", "md-thumb-down", "md-thumbs-up-down", "md-thumb-up", "md-toc", "md-today", "md-track-changes", "md-translate", "md-trending-down", "md-trending-neutral", "md-trending-up", "md-turned-in", "md-turned-in-not", "md-verified-user", "md-view-agenda", "md-view-array", "md-view-carousel", "md-view-column", "md-view-day", "md-view-headline", "md-view-list", "md-view-module", "md-view-quilt", "md-view-stream", "md-view-week", "md-visibility", "md-visibility-off", "md-wallet-giftcard", "md-wallet-membership", "md-wallet-travel", "md-work", "md-error", "md-warning", "md-album", "md-av-timer", "md-closed-caption", "md-equalizer", "md-explicit", "md-fast-forward", "md-fast-rewind", "md-games", "md-hearing", "md-high-quality", "md-loop", "md-mic", "md-mic-none", "md-mic-off", "md-movie", "md-my-library-add", "md-my-library-books", "md-my-library-music", "md-new-releases", "md-not-interested", "md-pause", "md-pause-circle-fill", "md-pause-circle-outline", "md-play-arrow", "md-play-circle-fill", "md-play-circle-outline", "md-playlist-add", "md-play-shopping-bag", "md-queue", "md-queue-music", "md-radio", "md-recent-actors", "md-repeat", "md-repeat-one", "md-replay", "md-shuffle", "md-skip-next", "md-skip-previous", "md-snooze", "md-stop", "md-subtitles", "md-surround-sound", "md-videocam", "md-videocam-off", "md-video-collection", "md-volume-down", "md-volume-mute", "md-volume-off", "md-volume-up", "md-web", "md-business", "md-call", "md-call-end", "md-call-made", "md-call-merge", "md-call-missed", "md-call-received", "md-call-split", "md-chat", "md-clear-all", "md-comment", "md-contacts", "md-dialer-sip", "md-dialpad", "md-dnd-on", "md-email", "md-forum", "md-import-export", "md-invert-colors-off", "md-invert-colors-on", "md-live-help", "md-location-off", "md-location-on", "md-message", "md-messenger", "md-no-sim", "md-phone", "md-portable-wifi-off", "md-quick-contacts-dialer", "md-quick-contacts-mail", "md-ring-volume", "md-stay-current-landscape", "md-stay-current-portrait", "md-stay-primary-landscape", "md-stay-primary-portrait", "md-swap-calls", "md-textsms", "md-voicemail", "md-vpn-key", "md-add", "md-add-box", "md-add-circle", "md-add-circle-outline", "md-archive", "md-backspace", "md-block", "md-clear", "md-content-copy", "md-content-cut", "md-content-paste", "md-create", "md-drafts", "md-filter-list", "md-flag", "md-forward", "md-gesture", "md-inbox", "md-link", "md-mail", "md-markunread", "md-redo", "md-remove", "md-remove-circle", "md-remove-circle-outline", "md-reply", "md-reply-all", "md-report", "md-save", "md-select-all", "md-send", "md-sort", "md-text-format", "md-undo", "md-access-alarm", "md-access-alarms", "md-access-time", "md-add-alarm", "md-airplanemode-off", "md-airplanemode-on", "md-battery-20", "md-battery-30", "md-battery-50", "md-battery-60", "md-battery-80", "md-battery-90", "md-battery-alert", "md-battery-charging-20", "md-battery-charging-30", "md-battery-charging-50", "md-battery-charging-60", "md-battery-charging-80", "md-battery-charging-90", "md-battery-charging-full", "md-battery-full", "md-battery-std", "md-battery-unknown", "md-bluetooth", "md-bluetooth-connected", "md-bluetooth-disabled", "md-bluetooth-searching", "md-brightness-auto", "md-brightness-high", "md-brightness-low", "md-brightness-medium", "md-data-usage", "md-developer-mode", "md-devices", "md-dvr", "md-gps-fixed", "md-gps-not-fixed", "md-gps-off", "md-location-disabled", "md-location-searching", "md-multitrack-audio", "md-network-cell", "md-network-wifi", "md-nfc", "md-now-wallpaper", "md-now-widgets", "md-screen-lock-landscape", "md-screen-lock-portrait", "md-screen-lock-rotation", "md-screen-rotation", "md-sd-storage", "md-settings-system-daydream", "md-signal-cellular-0-bar", "md-signal-cellular-1-bar", "md-signal-cellular-2-bar", "md-signal-cellular-3-bar", "md-signal-cellular-4-bar", "md-signal-cellular-connected-no-internet-0-bar", "md-signal-cellular-connected-no-internet-1-bar", "md-signal-cellular-connected-no-internet-2-bar", "md-signal-cellular-connected-no-internet-3-bar", "md-signal-cellular-connected-no-internet-4-bar", "md-signal-cellular-no-sim", "md-signal-cellular-null", "md-signal-cellular-off", "md-signal-wifi-0-bar", "md-signal-wifi-1-bar", "md-signal-wifi-2-bar", "md-signal-wifi-3-bar", "md-signal-wifi-4-bar", "md-signal-wifi-off", "md-storage", "md-usb", "md-wifi-lock", "md-wifi-tethering", "md-attach-file", "md-attach-money", "md-border-all", "md-border-bottom", "md-border-clear", "md-border-color", "md-border-horizontal", "md-border-inner", "md-border-left", "md-border-outer", "md-border-right", "md-border-style", "md-border-top", "md-border-vertical", "md-format-align-center", "md-format-align-justify", "md-format-align-left", "md-format-align-right", "md-format-bold", "md-format-clear", "md-format-color-fill", "md-format-color-reset", "md-format-color-text", "md-format-indent-decrease", "md-format-indent-increase", "md-format-italic", "md-format-line-spacing", "md-format-list-bulleted", "md-format-list-numbered", "md-format-paint", "md-format-quote", "md-format-size", "md-format-strikethrough", "md-format-textdirection-l-to-r", "md-format-textdirection-r-to-l", "md-format-underline", "md-functions", "md-insert-chart", "md-insert-comment", "md-insert-drive-file", "md-insert-emoticon", "md-insert-invitation", "md-insert-link", "md-insert-photo", "md-merge-type", "md-mode-comment", "md-mode-edit", "md-publish", "md-vertical-align-bottom", "md-vertical-align-center", "md-vertical-align-top", "md-wrap-text", "md-attachment", "md-cloud", "md-cloud-circle", "md-cloud-done", "md-cloud-download", "md-cloud-off", "md-cloud-queue", "md-cloud-upload", "md-file-download", "md-file-upload", "md-folder", "md-folder-open", "md-folder-shared", "md-cast", "md-cast-connected", "md-computer", "md-desktop-mac", "md-desktop-windows", "md-dock", "md-gamepad", "md-headset", "md-headset-mic", "md-keyboard", "md-keyboard-alt", "md-keyboard-arrow-down", "md-keyboard-arrow-left", "md-keyboard-arrow-right", "md-keyboard-arrow-up", "md-keyboard-backspace", "md-keyboard-capslock", "md-keyboard-control", "md-keyboard-hide", "md-keyboard-return", "md-keyboard-tab", "md-keyboard-voice", "md-laptop", "md-laptop-chromebook", "md-laptop-mac", "md-laptop-windows", "md-memory", "md-mouse", "md-phone-android", "md-phone-iphone", "md-phonelink", "md-phonelink-off", "md-security", "md-sim-card", "md-smartphone", "md-speaker", "md-tablet", "md-tablet-android", "md-tablet-mac", "md-tv", "md-watch", "md-add-to-photos", "md-adjust", "md-assistant-photo", "md-audiotrack", "md-blur-circular", "md-blur-linear", "md-blur-off", "md-blur-on", "md-brightness-1", "md-brightness-2", "md-brightness-3", "md-brightness-4", "md-brightness-5", "md-brightness-6", "md-brightness-7", "md-brush", "md-camera", "md-camera-alt", "md-camera-front", "md-camera-rear", "md-camera-roll", "md-center-focus-strong", "md-center-focus-weak", "md-collections", "md-colorize", "md-color-lens", "md-compare", "md-control-point", "md-control-point-duplicate", "md-crop", "md-crop-3-2", "md-crop-5-4", "md-crop-7-5", "md-crop-16-9", "md-crop-din", "md-crop-free", "md-crop-landscape", "md-crop-original", "md-crop-portrait", "md-crop-square", "md-dehaze", "md-details", "md-edit", "md-exposure", "md-exposure-minus-1", "md-exposure-minus-2", "md-exposure-zero", "md-exposure-plus-1", "md-exposure-plus-2", "md-filter", "md-filter-1", "md-filter-2", "md-filter-3", "md-filter-4", "md-filter-5", "md-filter-6", "md-filter-7", "md-filter-8", "md-filter-9", "md-filter-9-plus", "md-filter-b-and-w", "md-filter-center-focus", "md-filter-drama", "md-filter-frames", "md-filter-hdr", "md-filter-none", "md-filter-tilt-shift", "md-filter-vintage", "md-flare", "md-flash-auto", "md-flash-off", "md-flash-on", "md-flip", "md-gradient", "md-grain", "md-grid-off", "md-grid-on", "md-hdr-off", "md-hdr-on", "md-hdr-strong", "md-hdr-weak", "md-healing", "md-image", "md-image-aspect-ratio", "md-iso", "md-landscape", "md-leak-add", "md-leak-remove", "md-lens", "md-looks", "md-looks-1", "md-looks-2", "md-looks-3", "md-looks-4", "md-looks-5", "md-looks-6", "md-loupe", "md-movie-creation", "md-nature", "md-nature-people", "md-navigate-before", "md-navigate-next", "md-palette", "md-panorama", "md-panorama-fisheye", "md-panorama-horizontal", "md-panorama-vertical", "md-panorama-wide-angle", "md-photo", "md-photo-album", "md-photo-camera", "md-photo-library", "md-portrait", "md-remove-red-eye", "md-rotate-left", "md-rotate-right", "md-slideshow", "md-straighten", "md-style", "md-switch-camera", "md-switch-video", "md-tag-faces", "md-texture", "md-timelapse", "md-timer", "md-timer-3", "md-timer-10", "md-timer-auto", "md-timer-off", "md-tonality", "md-transform", "md-tune", "md-wb-auto", "md-wb-cloudy", "md-wb-incandescent", "md-wb-irradescent", "md-wb-sunny", "md-beenhere", "md-directions", "md-directions-bike", "md-directions-bus", "md-directions-car", "md-directions-ferry", "md-directions-subway", "md-directions-train", "md-directions-transit", "md-directions-walk", "md-flight", "md-hotel", "md-layers", "md-layers-clear", "md-local-airport", "md-local-atm", "md-local-attraction", "md-local-bar", "md-local-cafe", "md-local-car-wash", "md-local-convenience-store", "md-local-drink", "md-local-florist", "md-local-gas-station", "md-local-grocery-store", "md-local-hospital", "md-local-hotel", "md-local-laundry-service", "md-local-library", "md-local-mall", "md-local-movies", "md-local-offer", "md-local-parking", "md-local-pharmacy", "md-local-phone", "md-local-pizza", "md-local-play", "md-local-post-office", "md-local-print-shop", "md-local-restaurant", "md-local-see", "md-local-shipping", "md-local-taxi", "md-location-history", "md-map", "md-my-location", "md-navigation", "md-pin-drop", "md-place", "md-rate-review", "md-restaurant-menu", "md-satellite", "md-store-mall-directory", "md-terrain", "md-traffic", "md-apps", "md-cancel", "md-arrow-drop-down-circle", "md-arrow-drop-down", "md-arrow-drop-up", "md-arrow-back", "md-arrow-forward", "md-check", "md-close", "md-chevron-left", "md-chevron-right", "md-expand-less", "md-expand-more", "md-fullscreen", "md-fullscreen-exit", "md-menu", "md-more-horiz", "md-more-vert", "md-refresh", "md-unfold-less", "md-unfold-more", "md-adb", "md-bluetooth-audio", "md-disc-full", "md-dnd-forwardslash", "md-do-not-disturb", "md-drive-eta", "md-event-available", "md-event-busy", "md-event-note", "md-folder-special", "md-mms", "md-more", "md-network-locked", "md-phone-bluetooth-speaker", "md-phone-forwarded", "md-phone-in-talk", "md-phone-locked", "md-phone-missed", "md-phone-paused", "md-play-download", "md-play-install", "md-sd-card", "md-sim-card-alert", "md-sms", "md-sms-failed", "md-sync", "md-sync-disabled", "md-sync-problem", "md-system-update", "md-tap-and-play", "md-time-to-leave", "md-vibration", "md-voice-chat", "md-vpn-lock", "md-cake", "md-domain", "md-location-city", "md-mood", "md-notifications-none", "md-notifications", "md-notifications-off", "md-notifications-on", "md-notifications-paused", "md-pages", "md-party-mode", "md-group", "md-group-add", "md-people", "md-people-outline", "md-person", "md-person-add", "md-person-outline", "md-plus-one", "md-poll", "md-public", "md-school", "md-share", "md-whatshot", "md-check-box", "md-check-box-outline-blank", "md-radio-button-off", "md-radio-button-on", "md-star", "md-star-half", "md-star-outline", "md-home", "md-warning", "md-play-circle-fill", "md-forum", "md-content-paste", "md-battery-80", "md-format-textdirection-l-to-r", "md-folder-open", "md-desktop-windows", "md-collections", "md-directions-bike", "md-apps", "md-phone-in-talk", "md-people", "md-star-half"],
    e = ["ad.svg", "button.svg", "converse.svg", "fire extinguisher.svg", "lamp.svg", "passport.svg", "skate.svg", "theatre.svg", "turntable.svg", "wacom.svg", "bill.svg", "buzzer.svg", "conveyor.svg", "helmet.svg", "luggage.svg", "presentation.svg", "smart watch.svg", "tie.svg", "umbrella.svg", "workspace.svg", "bowling.svg", "calculator.svg", "demoltion.svg", "icecream.svg", "microscope.svg", "server.svg", "switcher.svg", "tower.svg", "vespa.svg", "wrench.svg"],
    f = ["pink", "red", "purple", "indigo", "blue", "light-blue", "cyan", "teal", "green", "light-green", "lime", "yellow", "amber", "orange", "deep-orange"],
    g = ["lighten-2", "lighten-1", "darken-1", "darken-2"];
    return {
        createFirstname: function() {
            return c.first_name[a(0, c.first_name.length - 1)]
        },
        createLastname: function() {
            return c.last_name[a(0, c.last_name.length - 1)]
        },
        createIcon: function(b) {
            if (b = b || !1, !b) return '<i class="md ' + d[a(0, d.length - 1)] + '"></i>';
            var c = f[a(0, f.length - 1)],
            e = g[a(0, g.length - 1)];
            return '<i class="md ' + d[a(0, d.length - 1)] + " " + c + " " + e + ' icon-color"></i>'
        },
        createImg: function() {
            return e[a(0, e.length - 1)]
        },
        createName: function() {
            return this.createFirstname() + " " + this.createLastname()
        },
        createSentence: function(c) {
            var d, e;
            return c = c || a(5, 20),
            d = a(0, b.length - c - 1),
            e = b.slice(d, d + c).join(" ").replace(/\,$/g, "") + ".",
            e = e.charAt(0).toUpperCase() + e.slice(1)
        },
        createSentences: function(b) {
            var c = [],
            d = 0;
            for (b = b || a(3, 5), d = 0; b > d; d++) c.push(this.createSentence());
            return c.join(" ")
        },
        createParagraph: function(a, b) {
            var c = this.createSentences(a);
            return b ? "<p>" + c + "</p>": c + "\n"
        },
        createParagraphs: function(b, c, d) {
            var e = [],
            f = 0;
            for (b = b || a(3, 7), f = 0; b > f; f++) e.push(this.createParagraph(c, d));
            return e.join("\n")
        }
    }
}).directive("placeholderText", ["PlaceholderTextService",
function(a) {
    return {
        restrict: "A",
        link: function(b, c, d, e) {
            numParagraphs = d.sentences || 1,
            numSentences = d.paragraphs || 6,
            html = d.html || !0,
            c.html(a.createParagraphs(numParagraphs, numSentences, !0))
        }
    }
}]).directive("placeholderTitle", ["PlaceholderTextService",
function(a) {
    return {
        restrict: "A",
        link: function(b, c, d) {
            c.html(a.createSentence(5))
        }
    }
}]).directive("placeholderName", ["PlaceholderTextService",
function(a) {
    return {
        restrict: "A",
        link: function(b, c, d, e) {
            c.html(a.createName())
        }
    }
}]).directive("placeholderP", ["PlaceholderTextService",
function(a) {
    return {
        restrict: "A",
        link: function(b, c, d, e) {
            c.html(a.createParagraph(1, 3, !1))
        }
    }
}]).directive("placeholderImg", ["PlaceholderTextService",
function(a) {
    return {
        restrict: "A",
        link: function(b, c, d, e) {
            c.attr("src", "assets/img/icons/ballicons/" + a.createImg())
        }
    }
}]).directive("placeholderIcon", ["PlaceholderTextService",
function(a) {
    return {
        restrict: "A",
        link: function(b, c, d, e) {
            c.html(a.createIcon(!1))
        }
    }
}]).directive("placeholderForm", ["PlaceholderTextService",
function(a) {
    return {
        restrict: "C",
        link: function(b, c, d, e) {
            angular.forEach(c.find("input, textarea"),
            function(b) {
                switch (elem = angular.element(b), b.type) {
                case "textarea":
                    b.bla = "hi",
                    elem.val(a.createParagraphs(1, 4));
                    break;
                case "text":
                    elem.val(a.createSentence());
                    break;
                case "password":
                    elem.val("nakama?");
                    break;
                case "checkbox":
                    elem.attr("checked", "checked")
                }
                elem.val() && elem.parent().addClass("filled")
            })
        }
    }
}]).directive("placeholderImage",
function() {
    return {
        restrict: "A",
        scope: {
            dimensions: "@placeholderImage"
        },
        link: function(a, b, c) {
            function d() {
                var b = [a.size.h, a.size.w].sort(),
                c = Math.round(b[1] / 16);
                return Math.max(g.text_size, c)
            }
            function e() {
                f = f || document.createElement("canvas");
                var b, c, e = f.getContext("2d");
                return f.width = a.size.w,
                f.height = a.size.h,
                e.fillStyle = g.fill_color,
                e.fillRect(0, 0, a.size.w, a.size.h),
                b = d(),
                c = a.dimensions,
                e.fillStyle = g.text_color,
                e.textAlign = "center",
                e.textBaseline = "middle",
                e.font = "bold " + b + "pt sans-serif",
                e.measureText(c).width / a.size.w > 1 && (b = g.text_size / (e.measureText(c).width / a.size.w), e.font = "bold " + b + "pt sans-serif"),
                e.fillText(a.dimensions, a.size.w / 2, a.size.h / 2),
                f.toDataURL("image/png")
            }
            var f, g = {
                text_size: 10,
                fill_color: "#EEEEEE",
                text_color: "#AAAAAA"
            };
            a.$watch("dimensions",
            function() {
                if (angular.isDefined(a.dimensions)) {
                    var c, d = a.dimensions.match(/^(\d+)x(\d+)$/);
                    if (!d) return void console.error("Expected '000x000'. Got " + a.dimensions);
                    a.size = {
                        w: d[1],
                        h: d[2]
                    },
                    b.prop("title", a.dimensions),
                    b.prop("alt", a.dimensions),
                    c = e(),
                    "IMG" === b.prop("tagName") ? b.prop("src", c) : b.css("background-image", 'url("' + c + '")')
                }
            })
        }
    }
}),
function(a) {
    var b = {
        init: function(b) {
            var c = {
                menuWidth: 250,
                edge: "left",
                closeOnClick: !1
            };
            b = a.extend(c, b),
            a(this).each(function() {
                function c(c) {
                    f = !1,
                    g = !1,
                    a("body").removeClass("overflow-no"),
                    a("#sidenav-overlay").velocity({
                        opacity: 0
                    },
                    {
                        duration: 200,
                        queue: !1,
                        easing: "easeOutQuad",
                        complete: function() {
                            a(this).remove()
                        }
                    }),
                    "left" === b.edge ? (a(".drag-target").css({
                        width: "",
                        right: "",
                        left: "0"
                    }), e.velocity({
                        left: -1 * (b.menuWidth + 10)
                    },
                    {
                        duration: 200,
                        queue: !1,
                        easing: "easeOutCubic",
                        complete: function() {
                            c === !0 && (e.removeAttr("style"), e.css("width", b.menuWidth))
                        }
                    })) : (a(".drag-target").css({
                        width: "",
                        right: "0",
                        left: ""
                    }), e.velocity({
                        right: -1 * (b.menuWidth + 10)
                    },
                    {
                        duration: 200,
                        queue: !1,
                        easing: "easeOutCubic",
                        complete: function() {
                            c === !0 && (e.removeAttr("style"), e.css("width", b.menuWidth))
                        }
                    }))
                }
                var d = a(this),
                e = a(d.attr("data-activates"));
                250 != b.menuWidth && e.css("width", b.menuWidth),
                a("body").append(a('<div class="drag-target"></div>')),
                "left" == b.edge ? (e.css("left", -1 * (b.menuWidth + 10)), a(".drag-target").css({
                    left: 0
                })) : (e.addClass("right-aligned").css("right", -1 * (b.menuWidth + 10)).css("left", ""), a(".drag-target").css({
                    right: 0
                })),
                e.hasClass("fixed") && a(window).width() > 992 && e.css("left", 0),
                window.innerWidth > 992 && (g = !0),
                e.hasClass("fixed") && a(window).resize(function() {
                    window.innerWidth > 992 ? 0 !== a("#sidenav-overlay").css("opacity") && g ? c(!0) : (e.removeAttr("style"), e.css("width", b.menuWidth)) : g === !1 && ("left" === b.edge ? e.css("left", -1 * (b.menuWidth + 10)) : e.css("right", -1 * (b.menuWidth + 10)))
                }),
                b.closeOnClick === !0 && e.on("click.itemclick", "a:not(.collapsible-header)",
                function() {
                    g === !0 && c()
                });
                var f = !1,
                g = !1;
                a(".drag-target").on("click",
                function() {
                    c()
                }),
                a(".drag-target").hammer({
                    prevent_default: !1
                }).bind("pan",
                function(d) {
                    if ("touch" == d.gesture.pointerType) {
                        {
                            var f = (d.gesture.direction, d.gesture.center.x);
                            d.gesture.center.y,
                            d.gesture.velocityX
                        }
                        if (0 === a("#sidenav-overlay").length) {
                            var h = a('<div id="sidenav-overlay"></div>');
                            h.css("opacity", 0).click(function() {
                                c()
                            }),
                            a("body").append(h)
                        }
                        if ("left" === b.edge && (f > b.menuWidth ? f = b.menuWidth: 0 > f && (f = 0)), "left" === b.edge) f < b.menuWidth / 2 ? g = !1 : f >= b.menuWidth / 2 && (g = !0),
                        e.css("left", f - b.menuWidth);
                        else {
                            f < a(window).width() - b.menuWidth / 2 ? g = !0 : f >= a(window).width() - b.menuWidth / 2 && (g = !1);
                            var i = -1 * (f - b.menuWidth / 2);
                            i > 0 && (i = 0),
                            e.css("right", i)
                        }
                        "left" === b.edge ? (overlayPerc = f / b.menuWidth, a("#sidenav-overlay").velocity({
                            opacity: overlayPerc
                        },
                        {
                            duration: 50,
                            queue: !1,
                            easing: "easeOutQuad"
                        })) : (overlayPerc = Math.abs((f - a(window).width()) / b.menuWidth), a("#sidenav-overlay").velocity({
                            opacity: overlayPerc
                        },
                        {
                            duration: 50,
                            queue: !1,
                            easing: "easeOutQuad"
                        }))
                    }
                }).bind("panend",
                function(c) {
                    if ("touch" == c.gesture.pointerType) {
                        var d = c.gesture.velocityX;
                        f = !1,
                        "left" === b.edge ? g && .3 >= d || -.5 > d ? (e.velocity({
                            left: 0
                        },
                        {
                            duration: 300,
                            queue: !1,
                            easing: "easeOutQuad"
                        }), a("#sidenav-overlay").velocity({
                            opacity: 1
                        },
                        {
                            duration: 50,
                            queue: !1,
                            easing: "easeOutQuad"
                        }), a(".drag-target").css({
                            width: "50%",
                            right: 0,
                            left: ""
                        })) : (!g || d > .3) && (e.velocity({
                            left: -1 * (b.menuWidth + 10)
                        },
                        {
                            duration: 200,
                            queue: !1,
                            easing: "easeOutQuad"
                        }), a("#sidenav-overlay").velocity({
                            opacity: 0
                        },
                        {
                            duration: 200,
                            queue: !1,
                            easing: "easeOutQuad",
                            complete: function() {
                                a(this).remove()
                            }
                        }), a(".drag-target").css({
                            width: "10px",
                            right: "",
                            left: 0
                        })) : g && d >= -.3 || d > .5 ? (e.velocity({
                            right: 0
                        },
                        {
                            duration: 300,
                            queue: !1,
                            easing: "easeOutQuad"
                        }), a("#sidenav-overlay").velocity({
                            opacity: 1
                        },
                        {
                            duration: 50,
                            queue: !1,
                            easing: "easeOutQuad"
                        }), a(".drag-target").css({
                            width: "50%",
                            right: "",
                            left: 0
                        })) : (!g || -.3 > d) && (e.velocity({
                            right: -1 * (b.menuWidth + 10)
                        },
                        {
                            duration: 200,
                            queue: !1,
                            easing: "easeOutQuad"
                        }), a("#sidenav-overlay").velocity({
                            opacity: 0
                        },
                        {
                            duration: 200,
                            queue: !1,
                            easing: "easeOutQuad",
                            complete: function() {
                                a(this).remove()
                            }
                        }), a(".drag-target").css({
                            width: "10px",
                            right: 0,
                            left: ""
                        })),
                        a("body").addClass("overflow-no")
                    }
                }),
                d.click(function() {
                    if (g === !0) g = !1,
                    f = !1,
                    c();
                    else {
                        a("body").addClass("overflow-no"),
                        "left" === b.edge ? (a(".drag-target").css({
                            width: "50%",
                            right: 0,
                            left: ""
                        }), e.velocity({
                            left: 0
                        },
                        {
                            duration: 300,
                            queue: !1,
                            easing: "easeOutQuad"
                        })) : (a(".drag-target").css({
                            width: "50%",
                            right: "",
                            left: 0
                        }), e.velocity({
                            right: 0
                        },
                        {
                            duration: 300,
                            queue: !1,
                            easing: "easeOutQuad"
                        }), e.css("left", ""));
                        var d = a('<div id="sidenav-overlay"></div>');
                        d.css("opacity", 0).click(function() {
                            g = !1,
                            f = !1,
                            c(),
                            d.velocity({
                                opacity: 0
                            },
                            {
                                duration: 300,
                                queue: !1,
                                easing: "easeOutQuad",
                                complete: function() {
                                    a(this).remove()
                                }
                            })
                        }),
                        a("body").append(d),
                        d.velocity({
                            opacity: 1
                        },
                        {
                            duration: 300,
                            queue: !1,
                            easing: "easeOutQuad",
                            complete: function() {
                                g = !0,
                                f = !1
                            }
                        })
                    }
                    return ! 1
                })
            })
        },
        show: function() {
            this.trigger("click")
        },
        hide: function() {
            a("#sidenav-overlay").trigger("click")
        }
    };
    a.fn.sideNav = function(c) {
        return b[c] ? b[c].apply(this, Array.prototype.slice.call(arguments, 1)) : "object" != typeof c && c ? void a.error("Method " + c + " does not exist on jQuery.tooltip") : b.init.apply(this, arguments)
    }
} (jQuery),
function(a, b, c, d) {
    "use strict";
    function e(b, c) {
        g = this,
        this.element = a(b),
        this.options = a.extend({},
        h, c),
        this._defaults = h,
        this._name = f,
        this.init()
    }
    var f = "ripples",
    g = null,
    h = {};
    e.prototype.init = function() {
        var c = this.element;
        c.on("mousedown touchstart",
        function(d) {
            if (!g.isTouch() || "mousedown" !== d.type) {
                c.find(".ripple-wrapper").length || c.append('<div class="ripple-wrapper"></div>');
                var e = c.children(".ripple-wrapper"),
                f = g.getRelY(e, d),
                h = g.getRelX(e, d);
                if (f || h) {
                    var i = g.getRipplesColor(c),
                    j = a("<div></div>");
                    j.addClass("ripple").css({
                        left: h,
                        top: f,
                        "background-color": i
                    }),
                    e.append(j),
                    function() {
                        return b.getComputedStyle(j[0]).opacity
                    } (),
                    g.rippleOn(c, j),
                    setTimeout(function() {
                        g.rippleEnd(j)
                    },
                    500),
                    c.on("mouseup mouseleave touchend",
                    function() {
                        j.data("mousedown", "off"),
                        "off" === j.data("animating") && g.rippleOut(j)
                    })
                }
            }
        })
    },
    e.prototype.getNewSize = function(a, b) {
        return Math.max(a.outerWidth(), a.outerHeight()) / b.outerWidth() * 2.5
    },
    e.prototype.getRelX = function(a, b) {
        var c = a.offset();
        return g.isTouch() ? (b = b.originalEvent, 1 !== b.touches.length ? b.touches[0].pageX - c.left: !1) : b.pageX - c.left
    },
    e.prototype.getRelY = function(a, b) {
        var c = a.offset();
        return g.isTouch() ? (b = b.originalEvent, 1 !== b.touches.length ? b.touches[0].pageY - c.top: !1) : b.pageY - c.top
    },
    e.prototype.getRipplesColor = function(a) {
        var c = a.data("ripple-color") ? a.data("ripple-color") : b.getComputedStyle(a[0]).color;
        return c
    },
    e.prototype.hasTransitionSupport = function() {
        var a = c.body || c.documentElement,
        b = a.style,
        e = b.transition !== d || b.WebkitTransition !== d || b.MozTransition !== d || b.MsTransition !== d || b.OTransition !== d;
        return e
    },
    e.prototype.isTouch = function() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
    },
    e.prototype.rippleEnd = function(a) {
        a.data("animating", "off"),
        "off" === a.data("mousedown") && g.rippleOut(a)
    },
    e.prototype.rippleOut = function(a) {
        a.off(),
        g.hasTransitionSupport() ? a.addClass("ripple-out") : a.animate({
            opacity: 0
        },
        100,
        function() {
            a.trigger("transitionend")
        }),
        a.on("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",
        function() {
            a.remove()
        })
    },
    e.prototype.rippleOn = function(a, b) {
        var c = g.getNewSize(a, b);
        g.hasTransitionSupport() ? b.css({
            "-ms-transform": "scale(" + c + ")",
            "-moz-transform": "scale(" + c + ")",
            "-webkit-transform": "scale(" + c + ")",
            transform: "scale(" + c + ")"
        }).addClass("ripple-on").data("animating", "on").data("mousedown", "on") : b.animate({
            width: 2 * Math.max(a.outerWidth(), a.outerHeight()),
            height: 2 * Math.max(a.outerWidth(), a.outerHeight()),
            "margin-left": -1 * Math.max(a.outerWidth(), a.outerHeight()),
            "margin-top": -1 * Math.max(a.outerWidth(), a.outerHeight()),
            opacity: .2
        },
        500,
        function() {
            b.trigger("transitionend")
        })
    },
    a.fn.ripples = function(b) {
        return this.each(function() {
            a.data(this, "plugin_" + f) || a.data(this, "plugin_" + f, new e(this, b))
        })
    }
} (jQuery, window, document);
var withRipples = [".btn:not(.withoutripple)", ".card-image", ".navbar a:not(.withoutripple)", ".dropdown-menu a", ".nav-tabs a:not(.withoutripple)", ".withripple", "aside.sidebar ul a"].join(","),
fsm = angular.module("fsm", []);
fsm.directive("fsmStickyHeader",
function() {
    return {
        restrict: "EA",
        replace: !1,
        scope: {
            scrollBody: "=",
            scrollStop: "=",
            scrollableContainer: "="
        },
        link: function(a, b, c, d) {
            function e() {
                j = i,
                i = j.clone(),
                j.after(i),
                j.addClass("fsm-sticky-header"),
                j.css({
                    position: "fixed",
                    "z-index": 1029,
                    visibility: "hidden"
                }),
                f()
            }
            function f() {
                j.css({
                    top: a.scrollStop,
                    width: i.outerWidth(),
                    left: i.offset().left
                }),
                g()
            }
            function g() {
                if (j.is("tr")) {
                    var a = j.find("th");
                    i.find("th").each(function(b, c) {
                        var d = $(a[b]);
                        d.css("width", c.offsetWidth + "px")
                    })
                }
            }
            function h() {
                var b = l.scrollTop() + a.scrollStop,
                c = k.offset().top,
                d = c + k.outerHeight(!1);
                if (b > c && d > b) if (j || (e(), j.css({
                    visibility: "visible"
                })), d > b && b > d - j.outerHeight(!1)) {
                    var g = d - b + a.scrollStop - j.outerHeight(!1);
                    j.css("top", g + "px")
                } else f();
                else j && (i.remove(), i = j, j = null, i.removeClass("fsm-sticky-header"), i.css({
                    position: "relative",
                    left: 0,
                    top: 0,
                    width: "auto",
                    "z-index": 0,
                    visibility: "visible"
                }))
            }
            var i = $(b, this),
            j = null,
            k = $(a.scrollBody),
            l = $(a.scrollableContainer);
            0 == l.length && (l = $(window)),
            l.scroll(h).trigger("scroll"),
            l.resize(h)
        }
    }
}),
fsm.directive("fsmMenuButton",
function() {
    return {
        restrict: "EA",
        replace: !1,
        scope: {},
        link: function(a, b, c, d) {
            function e() {
                $("body").toggleClass("fsm-menu-toggle"),
                f(),
                setTimeout(f, 50)
            }
            function f() {
                g.find(".fsm-menu-button-open").toggleClass("fsm-spin-forward"),
                g.find(".fsm-menu-button-closed").toggleClass("fsm-spin-backward")
            }
            var g = $(b, this);
            g.addClass("fsm-menu-button"),
            g.click(e)
        }
    }
}),
fsm.directive("fsmBigData",
function(a) {
    return {
        restrict: "AE",
        scope: !0,
        replace: !1,
        transclude: !0,
        link: function(b, c, d, e, f) {
            var g = a("orderBy"),
            h = 0,
            i = d.fsmBigData.split(" of ")[0],
            j = d.fsmBigData.split(" of ")[1],
            k = parseInt(j.split(" take ")[1]),
            l = j.split(" take ")[0],
            m = [],
            n = [],
            o = [],
            p = $(window),
            q = ["None", "Ascending", "Descending"],
            r = [];
            b.sortTypes = q,
            f(b,
            function(a, d) {
                function e() {
                    var a = n.slice(k * h, k * (h + 1));
                    a.length > 0 && (o.push.apply(o, a), h++)
                }
                function f(a, b) {
                    for (var c = 0; c < r.length; c++) r[c].indexOf(a) > -1 && r.splice(c, 1);
                    if (b > 0) {
                        var d = "";
                        "Descending" === q[b] && (d = "-"),
                        r.unshift(d + a)
                    }
                    j()
                }
                function j() {
                    n = r.length ? g(m, r) : m,
                    o.length = 0,
                    h = 0,
                    e()
                }
                function s() {
                    var a = $(window).scrollTop(),
                    b = $(document).height(),
                    c = $(window).height();
                    scrollPercent = a / (b - c),
                    scrollPercent > .98 && d.$apply(e)
                }
                c.append(a),
                d[i] = o,
                p.scroll(s).trigger("scroll"),
                b.$parent.$watchCollection(l,
                function(a) {
                    a && (m = a, j())
                }),
                b.addSortColumn = f
            })
        }
    }
}),
fsm.directive("fsmSort",
function() {
    var a = '<i class="md md-sort"></i>';
    return {
        restrict: "A",
        replace: !1,
        scope: {},
        link: function(b, c, d) {
            function e() {
                h.removeClass("md-arrow-drop-down md-arrow-drop-up md-sort ");
                var a = "md-sort";
                "Ascending" === b.$parent.sortTypes[i] ? a = "md-arrow-drop-down": "Descending" === b.$parent.sortTypes[i] && (a = "md-arrow-drop-up"),
                h.addClass(a)
            }
            var f = c,
            g = d.fsmSort,
            h = angular.element(a);
            f.append("&nbsp;"),
            f.append(h);
            var i = 0;
            f.css({
                cursor: "pointer"
            }),
            f.bind("click",
            function() {
                i++,
                i == b.$parent.sortTypes.length && (i = 0),
                b.$apply(b.$parent.addSortColumn(g, i)),
                e()
            })
        }
    }
}),
function() {
    "use strict";
    var a = angular.module("smoothScroll", []),
    b = function(a, b) {
        b = b || {};
        var c = b.duration || 800,
        d = b.offset || 0,
        e = b.easing || "easeInOutQuart",
        f = b.callbackBefore ||
        function() {},
        g = b.callbackAfter ||
        function() {},
        h = function() {
            return window.pageYOffset ? window.pageYOffset: document.documentElement.scrollTop
        };
        setTimeout(function() {
            var b, i, j = h(),
            k = 0,
            l = function(a, b) {
                return "easeInQuad" == a ? b * b: "easeOutQuad" == a ? b * (2 - b) : "easeInOutQuad" == a ? .5 > b ? 2 * b * b: -1 + (4 - 2 * b) * b: "easeInCubic" == a ? b * b * b: "easeOutCubic" == a ? --b * b * b + 1 : "easeInOutCubic" == a ? .5 > b ? 4 * b * b * b: (b - 1) * (2 * b - 2) * (2 * b - 2) + 1 : "easeInQuart" == a ? b * b * b * b: "easeOutQuart" == a ? 1 - --b * b * b * b: "easeInOutQuart" == a ? .5 > b ? 8 * b * b * b * b: 1 - 8 * --b * b * b * b: "easeInQuint" == a ? b * b * b * b * b: "easeOutQuint" == a ? 1 + --b * b * b * b * b: "easeInOutQuint" == a ? .5 > b ? 16 * b * b * b * b * b: 1 + 16 * --b * b * b * b * b: b
            },
            m = function(a) {
                var b = 0;
                if (a.offsetParent) do b += a.offsetTop,
                a = a.offsetParent;
                while (a);
                return b = Math.max(b - d, 0)
            },
            n = m(a),
            o = n - j,
            p = function() {
                var b = h(); (i == n || b == n || window.innerHeight + b >= document.body.scrollHeight) && (clearInterval(r), g(a))
            },
            q = function() {
                k += 16,
                b = k / c,
                b = b > 1 ? 1 : b,
                i = j + o * l(e, b),
                window.scrollTo(0, i),
                p()
            };
            f(a);
            var r = setInterval(q, 16)
        },
        0)
    };
    a.factory("smoothScroll",
    function() {
        return b
    }),
    a.directive("smoothScroll", ["smoothScroll",
    function(a) {
        return {
            restrict: "A",
            scope: {
                callbackBefore: "&",
                callbackAfter: "&"
            },
            link: function(b, c, d) { ("undefined" == typeof d.scrollIf || "true" === d.scrollIf) && setTimeout(function() {
                    var e = function(a) {
                        if (d.callbackBefore) {
                            var c = b.callbackBefore({
                                element: a
                            });
                            "function" == typeof c && c(a)
                        }
                    },
                    f = function(a) {
                        if (d.callbackAfter) {
                            var c = b.callbackAfter({
                                element: a
                            });
                            "function" == typeof c && c(a)
                        }
                    };
                    a(c[0], {
                        duration: d.duration,
                        offset: d.offset,
                        easing: d.easing,
                        callbackBefore: e,
                        callbackAfter: f
                    })
                },
                0)
            }
        }
    }]),
    a.directive("scrollTo", ["smoothScroll",
    function(a) {
        return {
            restrict: "A",
            link: function(b, c, d) {
                var e;
                c.on("click",
                function(c) {
                    if (c.preventDefault(), e = document.getElementById(d.scrollTo)) {
                        var f = function(a) {
                            if (d.callbackBefore) {
                                var c = b.callbackBefore({
                                    element: a
                                });
                                "function" == typeof c && c(a)
                            }
                        },
                        g = function(a) {
                            if (d.callbackAfter) {
                                var c = b.callbackAfter({
                                    element: a
                                });
                                "function" == typeof c && c(a)
                            }
                        };
                        return a(e, {
                            duration: d.duration,
                            offset: d.offset,
                            easing: d.easing,
                            callbackBefore: f,
                            callbackAfter: g
                        }),
                        !1
                    }
                })
            }
        }
    }])
} ();
var theme_colors = {
    "brand-primary": "blue",
    "brand-success": "green",
    "brand-info": "purple",
    "brand-warning": "orange",
    "brand-danger": "red",
    theme: "pink",
    "theme-secondary": "blue"
},
global_colors = {
    red: {
        "lighten-5": "#FFEBEE",
        "lighten-4": "#FFCDD2",
        "lighten-3": "#EF9A9A",
        "lighten-2": "#E57373",
        "lighten-1": "#EF5350",
        base: "#F44336",
        "darken-1": "#E53935",
        "darken-2": "#D32F2F",
        "darken-3": "#C62828",
        "darken-4": "#B71C1C",
        "accent-1": "#FF8A80",
        "accent-2": "#FF5252",
        "accent-3": "#FF1744",
        "accent-4": "#D50000"
    },
    pink: {
        "lighten-5": "#fce4ec",
        "lighten-4": "#f8bbd0",
        "lighten-3": "#f48fb1",
        "lighten-2": "#f06292",
        "lighten-1": "#ec407a",
        base: "#e91e63",
        "darken-1": "#d81b60",
        "darken-2": "#c2185b",
        "darken-3": "#ad1457",
        "darken-4": "#880e4f",
        "accent-1": "#ff80ab",
        "accent-2": "#ff4081",
        "accent-3": "#f50057",
        "accent-4": "#c51162"
    },
    purple: {
        "lighten-5": "#f3e5f5",
        "lighten-4": "#e1bee7",
        "lighten-3": "#ce93d8",
        "lighten-2": "#ba68c8",
        "lighten-1": "#ab47bc",
        base: "#9c27b0",
        "darken-1": "#8e24aa",
        "darken-2": "#7b1fa2",
        "darken-3": "#6a1b9a",
        "darken-4": "#4a148c",
        "accent-1": "#ea80fc",
        "accent-2": "#e040fb",
        "accent-3": "#d500f9",
        "accent-4": "#aa00ff"
    },
    "deep-purple": {
        "lighten-5": "#ede7f6",
        "lighten-4": "#d1c4e9",
        "lighten-3": "#b39ddb",
        "lighten-2": "#9575cd",
        "lighten-1": "#7e57c2",
        base: "#673ab7",
        "darken-1": "#5e35b1",
        "darken-2": "#512da8",
        "darken-3": "#4527a0",
        "darken-4": "#311b92",
        "accent-1": "#b388ff",
        "accent-2": "#7c4dff",
        "accent-3": "#651fff",
        "accent-4": "#6200ea"
    },
    indigo: {
        "lighten-5": "#e8eaf6",
        "lighten-4": "#c5cae9",
        "lighten-3": "#9fa8da",
        "lighten-2": "#7986cb",
        "lighten-1": "#5c6bc0",
        base: "#3f51b5",
        "darken-1": "#3949ab",
        "darken-2": "#303f9f",
        "darken-3": "#283593",
        "darken-4": "#1a237e",
        "accent-1": "#8c9eff",
        "accent-2": "#536dfe",
        "accent-3": "#3d5afe",
        "accent-4": "#304ffe"
    },
    blue: {
        "lighten-5": "#E3F2FD",
        "lighten-4": "#BBDEFB",
        "lighten-3": "#90CAF9",
        "lighten-2": "#64B5F6",
        "lighten-1": "#42A5F5",
        base: "#2196F3",
        "darken-1": "#1E88E5",
        "darken-2": "#1976D2",
        "darken-3": "#1565C0",
        "darken-4": "#0D47A1",
        "accent-1": "#82B1FF",
        "accent-2": "#448AFF",
        "accent-3": "#2979FF",
        "accent-4": "#2962FF"
    },
    "light-blue": {
        "lighten-5": "#e1f5fe",
        "lighten-4": "#b3e5fc",
        "lighten-3": "#81d4fa",
        "lighten-2": "#4fc3f7",
        "lighten-1": "#29b6f6",
        base: "#03a9f4",
        "darken-1": "#039be5",
        "darken-2": "#0288d1",
        "darken-3": "#0277bd",
        "darken-4": "#01579b",
        "accent-1": "#80d8ff",
        "accent-2": "#40c4ff",
        "accent-3": "#00b0ff",
        "accent-4": "#0091ea"
    },
    cyan: {
        "lighten-5": "#e0f7fa",
        "lighten-4": "#b2ebf2",
        "lighten-3": "#80deea",
        "lighten-2": "#4dd0e1",
        "lighten-1": "#26c6da",
        base: "#00bcd4",
        "darken-1": "#00acc1",
        "darken-2": "#0097a7",
        "darken-3": "#00838f",
        "darken-4": "#006064",
        "accent-1": "#84ffff",
        "accent-2": "#18ffff",
        "accent-3": "#00e5ff",
        "accent-4": "#00b8d4"
    },
    teal: {
        "lighten-5": "#e0f2f1",
        "lighten-4": "#b2dfdb",
        "lighten-3": "#80cbc4",
        "lighten-2": "#4db6ac",
        "lighten-1": "#26a69a",
        base: "#009688",
        "darken-1": "#00897b",
        "darken-2": "#00796b",
        "darken-3": "#00695c",
        "darken-4": "#004d40",
        "accent-1": "#a7ffeb",
        "accent-2": "#64ffda",
        "accent-3": "#1de9b6",
        "accent-4": "#00bfa5"
    },
    green: {
        "lighten-5": "#E8F5E9",
        "lighten-4": "#C8E6C9",
        "lighten-3": "#A5D6A7",
        "lighten-2": "#81C784",
        "lighten-1": "#66BB6A",
        base: "#4CAF50",
        "darken-1": "#43A047",
        "darken-2": "#388E3C",
        "darken-3": "#2E7D32",
        "darken-4": "#1B5E20",
        "accent-1": "#B9F6CA",
        "accent-2": "#69F0AE",
        "accent-3": "#00E676",
        "accent-4": "#00C853"
    },
    "light-green": {
        "lighten-5": "#f1f8e9",
        "lighten-4": "#dcedc8",
        "lighten-3": "#c5e1a5",
        "lighten-2": "#aed581",
        "lighten-1": "#9ccc65",
        base: "#8bc34a",
        "darken-1": "#7cb342",
        "darken-2": "#689f38",
        "darken-3": "#558b2f",
        "darken-4": "#33691e",
        "accent-1": "#ccff90",
        "accent-2": "#b2ff59",
        "accent-3": "#76ff03",
        "accent-4": "#64dd17"
    },
    lime: {
        "lighten-5": "#f9fbe7",
        "lighten-4": "#f0f4c3",
        "lighten-3": "#e6ee9c",
        "lighten-2": "#dce775",
        "lighten-1": "#d4e157",
        base: "#cddc39",
        "darken-1": "#c0ca33",
        "darken-2": "#afb42b",
        "darken-3": "#9e9d24",
        "darken-4": "#827717",
        "accent-1": "#f4ff81",
        "accent-2": "#eeff41",
        "accent-3": "#c6ff00",
        "accent-4": "#aeea00"
    },
    yellow: {
        "lighten-5": "#fffde7",
        "lighten-4": "#fff9c4",
        "lighten-3": "#fff59d",
        "lighten-2": "#fff176",
        "lighten-1": "#ffee58",
        base: "#ffeb3b",
        "darken-1": "#fdd835",
        "darken-2": "#fbc02d",
        "darken-3": "#f9a825",
        "darken-4": "#f57f17",
        "accent-1": "#ffff8d",
        "accent-2": "#ffff00",
        "accent-3": "#ffea00",
        "accent-4": "#ffd600"
    },
    amber: {
        "lighten-5": "#fff8e1",
        "lighten-4": "#ffecb3",
        "lighten-3": "#ffe082",
        "lighten-2": "#ffd54f",
        "lighten-1": "#ffca28",
        base: "#ffc107",
        "darken-1": "#ffb300",
        "darken-2": "#ffa000",
        "darken-3": "#ff8f00",
        "darken-4": "#ff6f00",
        "accent-1": "#ffe57f",
        "accent-2": "#ffd740",
        "accent-3": "#ffc400",
        "accent-4": "#ffab00"
    },
    orange: {
        "lighten-5": "#fff3e0",
        "lighten-4": "#ffe0b2",
        "lighten-3": "#ffcc80",
        "lighten-2": "#ffb74d",
        "lighten-1": "#ffa726",
        base: "#ff9800",
        "darken-1": "#fb8c00",
        "darken-2": "#f57c00",
        "darken-3": "#ef6c00",
        "darken-4": "#e65100",
        "accent-1": "#ffd180",
        "accent-2": "#ffab40",
        "accent-3": "#ff9100",
        "accent-4": "#ff6d00"
    },
    "deep-orange": {
        "lighten-5": "#fbe9e7",
        "lighten-4": "#ffccbc",
        "lighten-3": "#ffab91",
        "lighten-2": "#ff8a65",
        "lighten-1": "#ff7043",
        base: "#ff5722",
        "darken-1": "#f4511e",
        "darken-2": "#e64a19",
        "darken-3": "#d84315",
        "darken-4": "#bf360c",
        "accent-1": "#ff9e80",
        "accent-2": "#ff6e40",
        "accent-3": "#ff3d00",
        "accent-4": "#dd2c00"
    },
    brown: {
        "lighten-5": "#efebe9",
        "lighten-4": "#d7ccc8",
        "lighten-3": "#bcaaa4",
        "lighten-2": "#a1887f",
        "lighten-1": "#8d6e63",
        base: "#795548",
        "darken-1": "#6d4c41",
        "darken-2": "#5d4037",
        "darken-3": "#4e342e",
        "darken-4": "#3e2723"
    },
    "blue-grey": {
        "lighten-5": "#eceff1",
        "lighten-4": "#cfd8dc",
        "lighten-3": "#b0bec5",
        "lighten-2": "#90a4ae",
        "lighten-1": "#78909c",
        base: "#607d8b",
        "darken-1": "#546e7a",
        "darken-2": "#455a64",
        "darken-3": "#37474f",
        "darken-4": "#263238"
    },
    grey: {
        "lighten-5": "#fafafa",
        "lighten-4": "#f5f5f5",
        "lighten-3": "#eeeeee",
        "lighten-2": "#e0e0e0",
        "lighten-1": "#bdbdbd",
        base: "#9e9e9e",
        "darken-1": "#757575",
        "darken-2": "#616161",
        "darken-3": "#424242",
        "darken-4": "#212121"
    },
    shades: {
        black: "#000000",
        white: "#FFFFFF"
    }
},
app = angular.module("materialism", ["app.constants", "ngRoute", "ngAnimate", "ngSanitize", "ngPlaceholders", "ngTable", "angular-loading-bar", "uiGmapgoogle-maps", "ui.select", "gridshore.c3js.chart", "monospaced.elastic", "mgcrea.ngStrap", "jcs-autoValidate", "ngFileUpload", "textAngular", "fsm", "smoothScroll", "LocalStorageModule"]);

angular.module("app.constants", []).constant("APP", {
    version: "1.0.0"
}),

app.config(["$routeProvider", function(routeProvider) {
	routeProvider.when("/", {
        redirectTo: "/dashboard"
    }).when("/:folder/:tpl", {
        templateUrl: function(routeProvider) {
            return routeProvider.folder + "/" + routeProvider.tpl + ".jspx"
        }
    }).when("/:tpl", {
        templateUrl: function(routeProvider) {
            return "tpl/" + routeProvider.tpl + ".jspx"
        }
    }).otherwise({
        redirectTo: "/"
    })
}]).config(["cfpLoadingBarProvider", function(cfpLoadingBarProvider) {
	cfpLoadingBarProvider.includeSpinner = !1,
	cfpLoadingBarProvider.latencyThreshold = 1
}]).config(["$datepickerProvider", function(datepickerProvider) {
    angular.extend(datepickerProvider.defaults, {
        dateFormat: "dd/MM/yyyy",
        iconLeft: "md md-chevron-left",
        iconRight: "md md-chevron-right",
        autoclose: !0
    })
}]).config(["$timepickerProvider", function(timepickerProvider) {
    angular.extend(timepickerProvider.defaults, {
        timeFormat: "HH:mm",
        iconUp: "md md-expand-less",
        iconDown: "md md-expand-more",
        hourStep: 1,
        minuteStep: 1,
        arrowBehavior: "picker"
    })
}]).config(["$animateProvider", function(a) {
    a.classNameFilter(/^(?:(?!ng-animate-disabled).)*$/)
}]).config(["$httpProvider", function(httpProvider){
	httpProvider.defaults.headers.post = { 'Content-Type': 'application/json' }
}]).run(["$rootScope", "APP", function(a, b) {
    a.APP = b
}]),

app.filter("nospace", function() {
    return function(a) {
        return a ? a.replace(/ /g, "") : ""
    }
}),

app.directive("formControl", function() {
    return {
        restrict: "C",
        link: function(a, b, c) {
            b.val() && b.parent().addClass("filled"),
            b.bind("blur",  function(a) {
                input = angular.element(a.currentTarget),
                input.val() ? input.parent().addClass("filled") : input.parent().removeClass("filled"),
                input.parent().removeClass("active")
            }).bind("focus", function(a) {
                input = angular.element(a.currentTarget),
                input.parent().addClass("active")
            })
        }
    }
}),
app.directive("navbarScroll", function(a) {
    return {
        restrict: "A",
        link: function(b, c, d) {
            var e = angular.element(".main-container .navbar");
            angular.element(a).bind("scroll", function() {
                this.pageYOffset > 0 ? e.addClass("scroll") : e.removeClass("scroll")
            })
        }
    }
}),
app.directive("navbarSearch", ["$timeout", function(a) {
    return {
        restrict: "A",
        templateUrl: "tpl/navbar-search.jspx",
        link: function(a, b, c) {
            a.showNavbarSearch = !1,
            a.toggleSearch = function() {
                a.showNavbarSearch = !a.showNavbarSearch
            },
            a.submitNavbarSearch = function() {
                a.showNavbarSearch = !1
            }
        }
    }
}]),
app.directive("nouiSlider", function() {
    return {
        restrict: "A",
        link: function(a, b, c) {
            var d = angular.element(c.bind),
            e = angular.element(c.bindRange);
            d.length && (start = d.val()),
            start = c.start ? c.start: 0,
            range = c.range ? c.range: 0,
            range ? (startPoint = [start, range], b.addClass("noUi-range")) : startPoint = [start],
            step = c.step ? parseInt(c.step) : 0,
            min = c.min ? parseInt(c.min) : 0,
            max = c.max ? parseInt(c.max) : 10,
            $(b).noUiSlider({
                start: startPoint,
                step: step,
                range: {
                    min: [min],
                    max: [max]
                }
            }),
            $(b).on("slide", function(a, b) {
                e.length ? (v = parseInt(b[0]), v2 = parseInt(b[1])) : v = parseInt(b),
                d.length && (void 0 !== d[0].value ? d.val(v) : d.html(v)),
                e.length && (void 0 !== e[0].value ? e.val(v2) : e.html(v2))
            })
        }
    }
}),
app.directive("menuLink",function() {
    return {
        restrict: "A",
        transclude: !0,
        replace: !0,
        scope: {
            href: "@",
            icon: "@",
            name: "@"
        },
        templateUrl: "tpl/menu-link.jspx",
        controller: ["$element", "$location", "$rootScope", function(a, b, c) {
            this.getName = function(b) {
                return void 0 !== b ? b: a.find("a").text().trim()
            },
            this.setBreadcrumb = function(a) {
                c.pageTitle = this.getName(a)
            },
            this.isSelected = function(a) {
                return b.path() == a.slice(1, a.length)
            }
        }],
        link: function(a, b, c, d) {
            icon = c.icon,
            icon && b.children().first().prepend('<i class="' + icon + '"></i>&nbsp;'),
            d.isSelected(c.href) && d.setBreadcrumb(c.name),
            b.click(function() {
                d.setBreadcrumb(c.name)
            }),
            a.isSelected = function() {
                return d.isSelected(c.href)
            }
        }
    }
}),
app.directive("menuToggle", ["$location",
function(a) {
    return {
        restrict: "A",
        transclude: !0,
        replace: !0,
        scope: {
            name: "@",
            icon: "@"
        },
        templateUrl: "tpl/menu-toggle.jspx",
        link: function(b, c, d) {
            icon = d.icon,
            icon && c.children().first().prepend('<i class="' + icon + '"></i>&nbsp;'),
            c.children().first().on("click",
            function(a) {
                a.preventDefault(),
                link = angular.element(a.currentTarget),
                link.hasClass("active") ? link.removeClass("active") : link.addClass("active")
            }),
            b.isOpen = function() {
                return folder = "/" + a.path().split("/")[1],
                folder == d.path
            }
        }
    }
}]),
app.directive("vectormap", ["colorService",
function(a) {
    return {
        restrict: "E",
        markers: "=markers",
        link: function(b, c, d) {
            var e = null,
            f = b.markers;
            b.$watch("datamap", function(d, g) {
                e ? (e.vectorMap("get", "mapObject").series.regions[0].setValues(b.datamap), e.vectorMap("get", "mapObject").series.regions[0].setNormalizeFunction("polynomial"), e.vectorMap("get", "mapObject").series.regions[0].setScale([a.theme("darken-2"), a.theme("lighten-2")])) : ($(c).width("auto"), $(c).height("100%"), options = {
                    backgroundColor: "transparent",
                    series: {
                        regions: [{
                            values: b.datamap,
                            scale: [a.theme("darken-2"), a.theme("lighten-2")],
                            attribute: "fill"
                        }]
                    },
                    regionStyle: {
                        initial: {
                            fill: a.theme()
                        }
                    },
                    markerStyle: {
                        initial: {
                            stroke: a.theme_secondary("lighten-1"),
                            fill: a.theme_secondary("darken-1")
                        },
                        hover: {
                            stroke: a.theme_secondary("lighten-3")
                        }
                    }
                },
                null !== f && (options.markers = f), e = $(c).vectorMap(options))
            })
        }
    }
}]),
app.directive("autofocus", ["$timeout", function(a) {
    return {
        restrict: "A",
        link: function(b, c) {
            a(function() {
                c[0].focus()
            })
        }
    }
}]),
app.directive("cardFlip", function() {
    return {
        restrict: "C",
        link: function(a, b, c) {
            b.find(".btn-flip, .card-image").on("click", function() {
                b.find(".card-reveal").toggleClass("active")
            })
        }
    }
}),
app.directive("scrollSpy", ["$window", function(a) {
    return {
        link: function(b, c, d) {
            angular.element(a).bind("scroll", function() {
                b.scroll = this.pageYOffset,
                b.$$phase || b.$apply()
            })
        }
    }
}]),
app.factory("colorService", function() {
    function a(a) {
        return i(h("brand-primary"), a)
    }
    function b(a) {
        return i(h("brand-success"), a)
    }
    function c(a) {
        return i(h("brand-info"), a)
    }
    function d(a) {
        return i(h("brand-warning"), a)
    }
    function e(a) {
        return i(h("brand-danger"), a)
    }
    function f(a) {
        return a = a ? a: "base",
        i(h("theme"), a)
    }
    function g(a) {
        return a = a ? a: "base",
        i(h("theme-secondary"))
    }
    function h(a) {
        return void 0 !== theme_colors[a] ? theme_colors[a] : global_colors[a]
    }
    function i(a, b) {
        return b = b ? b: "base",
        global_colors[a][b]
    }
    return {
        brand_primary: a,
        brand_success: b,
        brand_info: c,
        brand_warning: d,
        brand_danger: e,
        theme: f,
        theme_secondary: g,
        get_color: i
    }
}),
app.factory("layerService", [function() {
    function layerAlert(msg) {
    	layer.msg(msg, {
    		time: 1500
    	})
    }
    function layerConfirm(msg, callback) {
    	layer.confirm(msg, {
		  btn: ['确认', '取消'] // 按钮
		},callback, function(){
			layer.msg("取消了当前操作", {
	    		time: 500
	    	})
		});
    }
    return {
    	layerAlert: layerAlert,
    	layerConfirm: layerConfirm
    }
}]);