function treeFilter(treeId, parentNode, childNodes) {
	if (!childNodes) return null;
	for (var i=0, l=childNodes.length; i<l; i++) {
		childNodes[i].name = childNodes[i].name.replace(/\.n/g, '.');
	}
	return childNodes;
}
var mapStyle = {
	styleJson : [{
        'featureType': 'water',
        'elementType': 'all'
    }, {
        'featureType': 'land',
        'elementType': 'all',
        'stylers': {
            'color': '#f3f3f3'
        }
    }, {
        'featureType': 'railway',
        'elementType': 'all',
        'stylers': {
            'visibility': 'off'
        }
    }, {
        'featureType': 'highway',
        'elementType': 'all',
        'stylers': {
            'color': '#fdfdfd'
        }
    }, {
        'featureType': 'highway',
        'elementType': 'labels',
        'stylers': {
            'visibility': 'on'
        }
    }, {
        'featureType': 'arterial',
        'elementType': 'geometry',
        'stylers': {
            'color': '#fefefe'
        }
    }, {
        'featureType': 'arterial',
        'elementType': 'geometry.fill',
        'stylers': {
            'color': '#fefefe'
        }
    }, {
        'featureType': 'green',
        'elementType': 'all',
        'stylers': {
            'visibility': 'on'
        }
    }, {
        'featureType': 'subway',
        'elementType': 'all',
        'stylers': {
            'visibility': 'off'
        }
    }, {
        'featureType': 'manmade',
        'elementType': 'all',
        'stylers': {
            'color': '#d1d1d1'
        }
    }, {
        'featureType': 'local',
        'elementType': 'all',
        'stylers': {
            'color': '#d1d1d1'
        }
    }, {
        'featureType': 'arterial',
        'elementType': 'labels',
        'stylers': {
            'visibility': 'off'
        }
    }, {
        'featureType': 'boundary',
        'elementType': 'all',
        'stylers': {
            'color': '#fefefe'
        }
    }, {
        'featureType': 'building',
        'elementType': 'all',
        'stylers': {
            'visibility': 'off'
        }
    }, {
        'featureType': 'label',
        'elementType': 'labels.text.fill',
        'stylers': {
            'visibility': 'off'
        }
    }]
};

app.controller("MainController", ["$scope", "$rootScope", "$animate", "$alert", "localStorageService",function(scope, rootScope, animate, alert, localStorage) {
    "undefined" == typeof browser_old && (initRipplesWithArrive(), $(document).arrive(".navbar-toggle", function() {
        $(this).sideNav({
            menuWidth: 260,
            closeOnClick: !0
        })
    })),
    scope.theme_colors = ["pink", "red", "purple", "indigo", "blue", "light-blue", "cyan", "teal", "green", "light-green", "lime", "yellow", "amber", "orange", "deep-orange"],
    scope.changeColorTheme = function(color) {
    	scope.theme.color = color
    },
    scope.changeTemplateTheme = function(template) {
    	scope.theme.template = template
    },
    localStorage.get("theme") || (theme = {
        color: "theme-pink",
        template: "theme-template-dark"
    },
    localStorage.set("theme", theme)),
    localStorage.bind(scope, "theme");
    
    var noShowUseChromeNotifyFlag = 0;
    rootScope.noShowUseChromeNotify = function(){
    	noShowUseChromeNotifyFlag = !noShowUseChromeNotifyFlag;
    	noShowUseChromeNotifyFlag?localStorage.set("checkBrowser", 1):localStorage.remove("checkBrowser");
    }
    if(!localStorage.get("checkBrowser")) {
    	var isChrome = window.navigator.userAgent.indexOf("Chrome"), isEdge = window.navigator.userAgent.indexOf("Edge");
    	if(!(isChrome >= 0 && isEdge < 0)) alert({
    		title: "重要提示",
    		content: "为了更好的使用系统，强烈建议您使用谷歌浏览器访问。",
    		placement: "top",
    		type: "theme",
    		show: 1,
    		template: "tpl/use-chrome.jspx",
    		animation: "mat-grow-top-right"
    	});
    }
    scope.loading = false
}]),

app.controller("DashboardController", ["$rootScope", "$scope", "$aside", "$http", "$location", "$timeout","localStorageService", function(rootScope, scope, aside, http, location, timeout, localStorageService) {
	rootScope.pageTitle = "全局监控（GIS）";
	var myChart;
	
	timeout(function(){
		var obj = document.getElementById("m-map");
		obj.style.height = document.body.clientHeight - 65 + 'px';
		window.onresize = function() {
			obj.style.height = document.body.clientHeight - 65 + 'px';
		}
		myChart = echarts.init(obj);
		myChart.on('click', function (data) {
			scope.pumpBaseInfo = data.data;
			scope.$apply()
		});
		
		http.get("all-pumps.jspx").success(function(response) {
    		loadMapData(response)
    	})
    })
	
	function loadMapData(data) {
		var option = {
			tooltip : {
				trigger: 'item',
				enterable: true,
				triggerOn: 'mousemove',
				position: function (point, params, dom) {
			      return [point[0] + 8, point[1] + 8];
				},
				backgroundColor: 'rgba(255,255,255,0.8)',
				borderColor: '#484848',
				borderWidth: 1,
				textStyle: {
					color: '#484848',
					fontStyle: 'normal',
					fontWeight: 'normal',
					fontFamily: 'sans-serif',
					fontSize: 12
				},
				formatter: function(val) {
					return val.data.pumpName
				}
			},
			bmap : {
				center : [ 116.403851, 39.915194 ],
				zoom : 12,
				roam : true,
				mapStyle : mapStyle
			},
			series : [ {
				name : function(val) {
					return val.pumpName;
				},
				type : 'effectScatter',
				coordinateSystem : 'bmap',
				data : data,
				symbolSize : function(val) {
					return 8;
				},
				showEffectOn : 'render',
				rippleEffect : {
					brushType : 'stroke'
				},
				hoverAnimation : true,
				label : {
					normal : {
						formatter : '{b}',
						position : 'right',
						show : true
					}
				},
				itemStyle : {
					normal : {
						color : function(val) {
							return val.value[2]
						},
						shadowBlur : 10,
						shadowColor : '#333'
					}
				},
				zlevel : 1
			} ]
		};
		myChart.setOption(option);
	}
	
	scope.pump = {};

	scope.hidePumpBaseInfoBox = function() {
		scope.pumpBaseInfo = false
	}
	
	scope.refreshMapData = function(){
		$("#refreshMapDataBtn").addClass("rotation");
		scope.hidePumpBaseInfoBox();
		http.get("all-pumps.jspx").success(function(response) {
			loadMapData(response)
			timeout(function(){
				$("#refreshMapDataBtn").removeClass("rotation")
			},200)
		})
	}
	
	scope.toPumpMonitor = function(pumpId) {
		if(pumpId){
			rootScope.paramPumpId = pumpId;
			location.path("/monitor/pump");
		}
	}
	
	scope.$on("$destroy", function() {
		scope.pumpBaseInfo = false
    })
}]),

app.controller("AreaController", ["$scope", "$aside", "$http", function(scope, aside, http) {
	scope.$on("$destroy", function() {
		
	})
}]),

app.controller("PumpController", ["$rootScope", "$scope", "$aside", "$http", "$location", "$timeout", "Upload", "layerService", function(rootScope, scope, aside, http, location, timeout, upload, layerService) {
	rootScope.pageTitle = "热泵监控";
	scope.showPumpInfo = false;
	scope.tabFlag = 'base';
	scope.showAll = true;
	
	scope.changeTab = function(tab) {
		scope.tabFlag = tab;
	}
	
	var selectLocationForm = aside({
        scope: scope,
        template: "tpl/form-select-location.jspx",
        show: !1,
        placement: "left",
        backdrop: true
    }),
    showPumpWarnGroupDetail = aside({
        scope: scope,
        template: "tpl/pump-warn-group-detail.jspx",
        animation: "am-fade-and-slide-top",
        show: !1,
        backdrop: true
    }),
    showPumpWarnGroupAdd = aside({
        scope: scope,
        template: "tpl/pump-warn-group-add.jspx",
        animation: "am-fade-and-slide-top",
        show: !1,
        backdrop: true
    }),
    showPumpProductDetail = aside({
        scope: scope,
        template: "tpl/pump-product-detail.jspx",
        animation: "am-fade-and-slide-top",
        show: !1,
        backdrop: true
    }),
    showPumpWeatherDetail = aside({
        scope: scope,
        template: "tpl/pump-weather-detail.jspx",
        animation: "am-fade-and-slide-top",
        show: !1,
        backdrop: true
    }),
    showPumpPictures = aside({
        scope: scope,
        template: "tpl/pump-pictures.jspx",
        animation: "am-fade-and-slide-top",
        show: !1,
        backdrop: true
    })
	
	function drawCanvas(canvas, bgImg, tmp1, tmp2, tmp3) {
		canvas.drawImage(bgImg, 0, 0, 649, 390);
		canvas.font = "12px Courier New";
		canvas.fillStyle = "blue";
		canvas.fillText(tmp1 + " ℃", 468 + 45 - 36, 72 + 2);
		canvas.fillText(tmp2 + " ℃", 468 + 45 - 36, 138 + 16);
		canvas.fillStyle = "red";
		canvas.fillText(tmp3 + " ℃", 468 - 214 + 45, 72 + 16);
	}
	
	function toDecimal2(x) {  
        var f = parseFloat(x);  
        if (isNaN(f)) {  
            return false;  
        }  
        var f = Math.round(x*100)/100;  
        var s = f.toString();  
        var rs = s.indexOf('.');  
        if (rs < 0) {  
            rs = s.length;  
            s += '.';  
        }  
        while (s.length <= rs + 2) {  
            s += '0';  
        }  
        return s;  
    }
	
	var loading = false;
	var setting = {
		async: {
			enable: true,
			url:"my-pump-data.jspx",
			autoParam:["id"],
			contentType: "application/json",
			dataFilter: treeFilter
		},
		callback : {
			onClick: function(event, treeId, treeNode) {
				if(!treeNode.isParent && !loading) {
					loadPumpData(treeNode.id);
				}
			}
		}
	};
	timeout(function(){
		$.fn.zTree.init($("#myPumpTree"), setting);
	})
	
	function loadPumpData(pumpId) {
		// if(scope.currentPumpId && pumpId == scope.currentPumpId) {
		// return;
		// }
		loading = true;
		scope.showAll = true;
		scope.showPumpInfo = false;
		
		$("#loopImg").addClass("rotation");
		$("#loopText").html("正在加载数据...");
		
		http.get("monitor/pump-info.jspx?pumpId=" +  pumpId).success(function (response) {
			
			loading = false;
			
			if(response.success) {
				
				scope.showPumpInfo = true;

				scope.pumpd = {
					base : response.pump,
					project : response.project,
					projectArea : response.projectArea,
					weather : response.weather,
					weatherAlarm : response.weatherAlarm,
					deviceProduct : response.deviceProduct,
					deviceVender : response.deviceVender,
					warnGroup : response.warnGroups
				}

				timeout(function(){
					loadPumpRuntimePic();
					loadPumpHnJp();
				})
				
				scope.showPumpMap = false;

				var lng = response.pump.areaLongitude, lat = response.pump.areaLatitude;
				if(lng != '' && lat != '') {
					scope.showPumpMap = true;
					timeout(function(){
						loadPumpMap(lng, lat);
					})
				}

				timeout(function(){
					scope.showAll = false;
				}, 100)
				
			} else {
				layerService.layerAlert(response.message)
				$("#loopImg").removeClass("rotation");
				$("#loopText").html("<span style='color:red'>" + response.message+"<span>");
			}
		});
	}
	
	function initLineOption(data) {
		return {
		    title: {
		        text: data.title,
				x : 'center'
		    },
		    tooltip: {
		        trigger: 'axis'
		    },
			grid : {
				x : 42,
				y : 46,
				x2 : 66,
				y2 : 24
			},
		    xAxis: {
		        type: 'category',
		        boundaryGap: false,
		        data: data.axis
		    },
		    yAxis: {
		        type: 'value'
		    },
		    series: [
		        {
		            name:'当前用电量',
		            type:'line',
		            data:data.data
		        }
		    ]
		}
	}
	
	function loadPumpHnJp(){
		var hourChart = echarts.init(document.getElementById("hn_container_hour"));
		
		var hourData = {
			title:'分时耗电 （kWh）',
			axis : [ '00点', '01点', '02点', '03点', '04点', '05点', '06点', '07点', '08点',
					'09点', '10点', '11点', '12点', '13点', '14点', '15点', '16点',
					'17点', '18点', '19点', '20点', '21点', '22点', '23点'],
			data : [ 15,15,15,15,16,16,16,17,17,18,18,19,20,21,22,22,23,24,24,25,25,25,26,26]
		}
		
		hourChart.setOption(initLineOption(hourData), true);
	}
	

	var pumpMasonry;
	var pumpRuntimeInterval = false;
	function loadPumpRuntimePic(){
		var myCanvas = document.getElementById('myCanvas').getContext("2d");
		var bgImg = document.getElementById('radiatorIcon');
		drawCanvas(myCanvas, bgImg, 0.00, 0.00, 0.00);
		if(pumpRuntimeInterval) {
			window.clearInterval(pumpRuntimeInterval);
		}
		pumpRuntimeInterval = setInterval(function(){
			drawCanvas(myCanvas, bgImg, toDecimal2(Math.random()*100), toDecimal2(Math.random()*100), toDecimal2(Math.random()*100 + 40));
		},500)
	}
	
	function loadPumpMap(lng, lat){
		var map = new BMap.Map("pumpd-map",{enableMapClick:false});
    	var point = new BMap.Point(lng, lat);
	    map.centerAndZoom(point, 12);
	    map.disableDragging();
	    map.disableScrollWheelZoom();
	    map.disableDoubleClickZoom();
	    map.disablePinchToZoom();
	    map.addOverlay(new BMap.Marker(point, {
          	icon:new BMap.Icon("http://api.map.baidu.com/lbsapi/createmap/images/icon.png",new BMap.Size(20,25),{
            	imageOffset: new BMap.Size(1,-22),
            	anchor: new BMap.Size(10,24)
          	})
       	}))
	    map.addControl(new BMap.NavigationControl({anchor:BMAP_ANCHOR_TOP_LEFT,type:0}));
	}
	
	if(rootScope.paramPumpId) {
		timeout(function(){
			loadPumpData(rootScope.paramPumpId);
			rootScope.paramPumpId = false
		})
	}
	
	scope.refreshPump = function(pumpId){
		loadPumpData(pumpId);
	}
	
	scope.getLocation = function(pump){
		if(scope.tabFlag != 'base') {
			return;
		}
		
		scope.local = {};
		scope.local.pumpId = pump.pumpId;
		scope.local.lat	= pump.areaLatitude || "39.915194";
		scope.local.lng = pump.areaLongitude || "116.403865";
		
		selectLocationForm.show();
		var slMap = new BMap.Map("select-location-map", {enableMapClick:false});
    	var point = new BMap.Point(scope.local.lng, scope.local.lat);

		var marker = new BMap.Marker(point);
		slMap.addOverlay(marker);
		
		slMap.enableScrollWheelZoom();
		slMap.setDefaultCursor("default");
    	
    	slMap.centerAndZoom(point, 14);
    	slMap.addEventListener("click",function(e){
    		
    		slMap.removeOverlay(marker);
    		marker = new BMap.Marker(e.point);
    		slMap.addOverlay(marker);

    		scope.local.lng = e.point.lng;
    		scope.local.lat = e.point.lat;
    		scope.$apply();
    	});
	},
	
	scope.setLocation = function(){
		http({
    		method: 'post',
    		url: 'manage/update-pump-lat-lng.jspx',
    		data: scope.local
    	}).success(function(response) {
    		if(response.success) {
    			scope.pumpd.base = response.pump;
    			selectLocationForm.hide();
    			scope.showPumpMap = true;
    			timeout(function(){
    				loadPumpMap(scope.local.lng, scope.local.lat);
    			});
    		} else {
    			layerService.layerAlert(response.message)
    		}
    	})
	},
	
	scope.showPumpPictures = function(pumpId){
		pumpId && http.get("monitor/pump-pictures.jspx?pumpId=" + pumpId).success(function (response) {
			if(response.success) {
				scope.pictures = response.data;
				scope.pumpGroupId = response.groupId;
				showPumpPictures.show();
			} else {
				layerService.layerAlert(response.message)
			}
		})
	},
	scope.uploadPumpImg = function ($file, groupId) {
    	if (!$file) {
    		layerService.layerAlert("请选择一个文件");
    		return;
    	}
    	if($file.type.indexOf("image") !== 0){
    		layerService.layerAlert("无效的文件类型");
    		return;
    	}
    	if($file.size > 2 * 1024 * 1024){
    		layerService.layerAlert("文件大小超过2Mb限制");
    		return;
    	}
        upload.upload({
            url: 'file/upload-img.jspx',
            data: {file: $file, groupId: groupId}
        }).then(function (resp) {
        	layerService.layerAlert(resp.data.message);
            if(resp.data.success) {
            	scope.pictures.unshift(resp.data.res);
            }
        }, function (resp) {
        	layerService.layerAlert("操作失败，请联系管理员");
        }, function (evt) {
        	// console.info(evt)
        	scope.progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
            // console.log('progress: ' + progressPercentage + '% ' + evt.config.data.file.name);
        });
    },
	
	scope.showPumpWarnGroupItems = function(warnGroupId) {
		warnGroupId && http.get("monitor/pump-warn-group-detail.jspx?warnGroupId=" + warnGroupId).success(function (response) {
			if(response.success) {
				scope.warnGroupItems = response.warnGroupItems,
				scope.currentWarnGroupId = warnGroupId,
				showPumpWarnGroupDetail.show()
			} else {
				layerService.layerAlert(response.message)
			}
		})
	},

	scope.showPumpWarnAdd = function(pumpId) {
		pumpId && http.get("monitor/pump-warn-group-data.jspx?pumpId=" + pumpId).success(function (response) {
			if(response.success) {
				scope.pumpNoUseWarnGroups = response.data;
				scope.currentPumpId = pumpId;
				showPumpWarnGroupAdd.show();
			} else {
				layerService.layerAlert(response.message)
			}
		})
	},
	
	scope.addPumpWarnGroup = function() {
		http({
    		method: 'post',
    		url: 'monitor/add-pump-warn-group.jspx',
    		data: {
    			groupId: scope.pumpNoUseWarnGroups.selected.groupId,
    			pumpId: scope.currentPumpId
    		}
    	}).success(function(response) {
			layerService.layerAlert(response.message)
    		if(response.success) {
    			scope.pumpd.warnGroup.push(response.warnGroup)
    			showPumpWarnGroupAdd.hide()
    		}
    	})
	},

	scope.removePumpWarnGroup = function(pumpId, warnGroupId) {
		layerService.layerConfirm("确认要移除该告警组吗？", function(){
			http({
	    		method: 'post',
	    		url: 'monitor/remove-pump-warn-group.jspx',
	    		data: {
	    			groupId: warnGroupId,
	    			pumpId: pumpId
	    		}
	    	}).success(function(response) {
				layerService.layerAlert(response.message)
	    		if(response.success) {
	    			scope.pumpd.warnGroup.splice(scope.pumpd.warnGroup.indexOf(response.warnGroup), 1),
	    			showPumpWarnGroupDetail.hide()
	    		}
	    	})
		})
	},
	
	scope.showPumpProductDetail = function(){
		showPumpProductDetail.show()
	},
	
	scope.showPumpWeatherDetail = function(){
		showPumpWeatherDetail.show()
	},
	
	scope.$on("$destroy", function() {
		selectLocationForm.hide(),
		showPumpWarnGroupDetail.hide(),
		showPumpWarnGroupAdd.hide(),
		showPumpPictures.hide()
	})
}]),

app.controller("UserController", ["$scope", "$aside", "$http", "$timeout", "layerService", "Upload", function(scope, aside, http, timeout, layerService, upload) {
	http.get("auth/user-data.jspx").success(function (response) {
		scope.data = response.data;
		angular.forEach(scope.data, function(a) {
            a.selected = !1;
        })
	});
    var creatForm = aside({
        scope: scope,
        template: "tpl/form-user-create.jspx",
        show: !1,
        placement: "left",
        backdrop: true
    }),
    
    updateForm = aside({
        scope: scope,
        template: "tpl/form-user-update.jspx",
        show: !1,
        placement: "left",
        backdrop: true
    }),
    
    detailForm = aside({
        scope: scope,
        template: "tpl/form-user-detail.jspx",
        show: !1,
        placement: "left",
        backdrop: true
    }),
    
    authForm = aside({
        scope: scope,
        template: "tpl/form-user-auth.jspx",
        show: !1,
        placement: "left",
        backdrop: true
    }),
    
    uploadHeadImgForm = aside({
        scope: scope,
        template: "tpl/form-user-upload-head-img.jspx",
        animation: "am-fade-and-slide-top",
        show: !1,
        backdrop: true
    }),
    
    showCreatForm = function() {
        angular.element(".tooltip").remove(),
        hideAllForm(),
        creatForm.show()
    },
    hideCreateForm = function() {
    	creatForm.hide()
    },
    showUpdateForm = function() {
        angular.element(".tooltip").remove(),
        hideAllForm(),
        updateForm.show()
    },
    hideUpdateForm = function() {
    	updateForm.hide()
    },
    showAuthForm = function() {
        angular.element(".tooltip").remove(),
        hideAllForm(),
        authForm.show()
    },
    hideAuthForm = function() {
    	authForm.hide()
    },
    showUploadHeadImgForm = function(){
        angular.element(".tooltip").remove(),
        hideAllForm(),
    	uploadHeadImgForm.show()
    },
    hideUploadHeadImgForm = function(){
    	uploadHeadImgForm.hide()
    },
    showDetailForm = function() {
        angular.element(".tooltip").remove(),
        hideAllForm(),
        detailForm.show()
    },
    hideDetailForm = function() {
    	detailForm.hide()
    },
    hideAllForm = function() {
    	hideCreateForm(),
    	hideUpdateForm(),
    	hideAuthForm(),
    	hideDetailForm(),
    	hideUploadHeadImgForm()
    };
    
    scope.keyword = "",
    
    scope.checkAll = function() {
        angular.forEach(scope.data, function(item) {
        	item.selected = scope.selectAll
        })
    },

    scope.create = function() {
    	http.get("auth/role-data.jspx").success(function(response) {
    		scope.roles = response.data,
            scope.user = {},
            scope.cmd = 'create',
            showCreatForm()
    	});
    },
    
    scope.save = function() {
    	scope.user.roleId = scope.roles.selected.roleId;
    	"create" === scope.cmd && http({
    		method: 'post',
    		url: 'auth/add-user.jspx',
    		data: scope.user
    	}).success(function(response) {
    		if(response.success) {
    			scope.data.push(response.user),
        		hideCreateForm()
    		} else {
    			layerService.layerAlert(response.message)
    		}
    	})
    },
    
    scope.edit = function(user) {
    	user && http.get("auth/role-data.jspx").success(function(response) {
    		scope.roles = response.data;
    		angular.forEach(scope.roles, function(role) {
    			if(role.roleId == user.roleId){
    				scope.roles.selected = role
    			}
            });
            scope.user = angular.copy(user),
            scope.cmd = 'update',
            showUpdateForm()
    	});
    },
    
    scope.update = function() {
    	"update" === scope.cmd && http({
    		method: 'post',
    		url: 'auth/change-user.jspx',
    		data: {
        		userId: scope.user.userId,
        		userName: scope.user.userName,
        		userLoginName: scope.user.userLoginName,
        		userPhone: scope.user.userPhone,
        		roleId: scope.roles.selected.roleId,
        	}
    	}).success(function(response) {
    		if(response.success) {
    			scope.data.forEach(function(user,index,arr){
				  if(user.userId == response.user.userId) {
					  arr[index] = response.user;
				  }          
				}),
        		hideUpdateForm()
    		} else {
    			layerService.layerAlert(response.message)
    		}
    	})
    },
    
    scope.showUploadHeadImg = function(user) {
    	scope.progressPercentage = 0;
        scope.currentUser = user,
        scope.cmd = 'updateImg',
        showUploadHeadImgForm();
    },
    
    scope.updateHeadImg = function ($file, user) {
    	if("updateImg" !== scope.cmd) {
    		return;
    	}
    	if (!$file) {
    		layerService.layerAlert("请选择一个文件");
    		return;
    	}
    	if($file.type.indexOf("image") !== 0){
    		layerService.layerAlert("无效的文件类型");
    		return;
    	}
    	if($file.size > 2 * 1024 * 1024){
    		layerService.layerAlert("文件大小超过2Mb限制");
    		return;
    	}
        upload.upload({
            url: 'file/upload-head-img.jspx',
            data: {file: $file, userId: user.userId}
        }).then(function (resp) {
        	layerService.layerAlert(resp.data.message);
            if(resp.data.success) {
            	user.userPortraitPath = resp.data.filePath;
            	timeout(function(){
            		hideUploadHeadImgForm();
            	}, 200)
            }
        }, function (resp) {
        	layerService.layerAlert("操作失败，请联系管理员");
        }, function (evt) {
        	// console.info(evt)
        	scope.progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
            // console.log('progress: ' + progressPercentage + '% ' + evt.config.data.file.name);
        });
    },
    
    scope.toggleUserStatus = function(user) {
    	user && http({
    		method: 'post',
    		url: 'auth/toggle-user-status.jspx',
    		data: {
        		userId: user.userId,
        		userDisableStatus: user.userDisableStatus
        	}
    	}).success(function(response) {
    		if(response.success) {
    			(user.userDisableStatus = !user.userDisableStatus)
    		} else {
    			layerService.layerAlert(response.message)
    		}
    	})
    },
   
    scope.resetPwd = function(user) {
    	user && layerService.layerConfirm("确认要重设该用户密码吗？", function(){
    		http({
        		method: 'post',
        		url: 'auth/reset-pwd.jspx',
        		data: {
            		userId: user.userId
            	}
        	}).success(function(response) {
        		if(response.success) {
        			layerService.layerAlert("重设成功")
        		} else {
        			layerService.layerAlert(response.message)
        		}
        	})
    	})
    }
    
    scope.remove = function(user) {
    	user && layerService.layerConfirm("确认要删除该用户吗？", function(){
    		http({
        		method: 'post',
        		url: 'auth/delete-user.jspx',
        		data: {
            		userId: user.userId
            	}
        	}).success(function(response) {
        		if(response.success) {
        			scope.data.splice(scope.data.indexOf(user), 1),
        			layerService.layerAlert("删除成功"),
        			hideDetailForm()
        		} else {
        			layerService.layerAlert(response.message)
        		}
        	})
    	})
    },
    
// scope.removeMore = function() {
// var userIds = [];
// scope.data.forEach(function(user,index,arr){
// if(user.selected) {
// userIds.push(user.userId);
// }
// })
// userIds.length > 0 && layerService.layerConfirm("确认要删除已选择的" + userIds.length
// + "个用户吗？", function(){
// http({
// method: 'post',
// url: 'auth/delete-users.jspx',
// data: userIds
// }).success(function(response) {
// if(response.success) {
// layerService.layerAlert("成功删除 " + response.successCount + " 条记录，删除失败 " +
// response.failCount + " 条记录。" + response.failMessage)
// scope.data = scope.data.filter(function(user) {
// return ! user.selected
// }), scope.selectAll = !1
// } else {
// layerService.layerAlert(response.message)
// }
// })
// })
// },
    
    scope.detail = function(user) {
    	user && (http.get("auth/role-data.jspx").success(function(response) {
    		scope.roles = response.data,
    		angular.forEach(scope.roles, function(role) {
    			if(role.roleId == user.roleId){
    				user.roleName = role.roleName
    			}
            });
    		scope.user = user,
    		showDetailForm()
    	}))
    },

    scope.auth = function(user) {
		scope.user = user;

		var setting = {
    		async: {
    			enable: true,
    			url:"my-pump-data.jspx",
    			autoParam:["id"],
    			contentType: "application/json",
    			dataFilter: treeFilter
    		},
    		callback: {
    			onClick: function(event, treeId, treeNode) {
    				layerService.layerConfirm("确认要授权当前用户访问节点 '" + treeNode.name + "' 吗？", function(){
    		    		http({
    		        		method: 'post',
    		        		url: 'auth/auth-user-visit.jspx',
    		        		data: {
    		            		userId: user.userId,
    		            		nodeId: treeNode.id,
    		            		areaNode: treeNode.isParent
    		            	}
    		        	}).success(function(response) {
    		        		if(response.success) {
    		        			http.get("auth/user-auth-data.jspx?userId=" + user.userId).success(function(resp) {
    		        	    		scope.userAuths = resp.data;
    		        	    	})
    		        			layerService.layerAlert("操作成功")
    		        		} else {
    		        			layerService.layerAlert(response.message)
    		        		}
    		        	})
    		    	})
    			}
    		}
    	};
		
		http.get("auth/user-auth-data.jspx?userId=" + user.userId).success(function(response) {
    		scope.userAuths = response.data;
    		scope.success = response.success;
    		showAuthForm();
    		if(response.success) {
    			$.fn.zTree.init($("#pumpTree"), setting);
    		}
    	})
    },
    
    scope.unauth = function(userId, id, name) {
    	layerService.layerConfirm("确认要取消授权当前用户访问节点 '" + name + "' 吗？", function(){
    		http({
        		method: 'post',
        		url: 'auth/un-auth-user-visit.jspx',
        		data: {
            		userId: userId,
            		nodeId: id,
            		areaNode: !1
            	}
        	}).success(function(response) {
        		if(response.success) {
        			http.get("auth/user-auth-data.jspx?userId=" + userId).success(function(response) {
        	    		scope.userAuths = response.data;
        	    	})
        			layerService.layerAlert("操作成功");
        			hideAuthForm();
        		} else {
        			layerService.layerAlert(response.message)
        		}
        	})
    	})
    }
    
    scope.$on("$destroy", function() {
    	hideAllForm()
    })
}]),

app.controller("RoleController", ["$scope", "$aside", "$http", "layerService", function(scope, aside, http, layerService) {
    scope.keyword = "",
	http.get("auth/role-data.jspx").success(function(response) {
		scope.data = response.data
	})
	authForm = aside({
	    scope: scope,
	    template: "tpl/form-role-auth.jspx",
	    show: !1,
	    placement: "left",
	    backdrop: true
	}),
	
	showAuthForm = function() {
	    angular.element(".tooltip").remove(),hideAuthForm(),authForm.show()
	},
	hideAuthForm = function() {
		authForm.hide()
	}

    scope.auth = function(role) {
    	scope.role = role,showAuthForm()
    },
    
    scope.$on("$destroy", function() {
    	hideAuthForm()
    })
	
}]),

app.controller("ProjectController", ["$scope", "$aside", "$http", "layerService", function(scope, aside, http, layerService) {
	scope.keyword = "",scope.data=[];
	
	scope.treeOptions = {
	    nodeChildren: "children",
	    dirSelectable: true
	}
	
	http.get("manage/project-data.jspx").success(function (response) {
		scope.data = response.data;
	});

	http.get("manage/project-area-data.jspx").success(function (response) {
		scope.projectAreas = response.data;
	});

	var creatForm = aside({
        scope: scope,
        template: "tpl/form-project-create.jspx",
		show: !1,
		placement: "left",
		backdrop: true
	}),
    updateForm = aside({
        scope: scope,
        template: "tpl/form-project-update.jspx",
        show: !1,
        placement: "left",
        backdrop: true
    }),
    manageForm = aside({
        scope: scope,
        template: "tpl/form-project-manage.jspx",
        show: !1,
        placement: "left",
        backdrop: true
    }),
    createPumpForm = aside({
        scope: scope,
        template: "tpl/form-pump-create.jspx",
        animation: "am-fade-and-slide-top",
        show: !1,
        backdrop: true
	}),
    updatePumpForm = aside({
        scope: scope,
        template: "tpl/form-pump-update.jspx",
        animation: "am-fade-and-slide-top",
        show: !1,
        backdrop: true
	}),
    
    showCreatForm = function() {
        angular.element(".tooltip").remove(),
        hideAllForm(),
        creatForm.show()
    },
    hideCreateForm = function() {
    	creatForm.hide()
    },
    
    showUpdateForm = function() {
        angular.element(".tooltip").remove(),
        hideAllForm(),
        updateForm.show()
    },
    hideUpdateForm = function() {
    	updateForm.hide()
    },
    
    showManageForm = function() {
        angular.element(".tooltip").remove(),
        hideAllForm(),
        manageForm.show()
    },
    hideManageForm = function() {
    	hideCreatePumpForm(),
    	manageForm.hide()
    },
    
    showCreatePumpForm = function() {
        angular.element(".tooltip").remove(),
        hideCreatePumpForm(),
        hideUpdatePumpForm(),
        createPumpForm.show()
    },
    hideCreatePumpForm = function() {
    	createPumpForm.hide()
    },
    
    showUpdatePumpForm = function() {
        angular.element(".tooltip").remove(),
        hideCreatePumpForm(),
        hideUpdatePumpForm(),
        updatePumpForm.show()
    },
    hideUpdatePumpForm = function() {
    	updatePumpForm.hide()
    },
    
    hideAllForm = function() {
    	creatForm.hide(),
    	updateForm.hide(),
    	manageForm.hide()
    },
    setProjectManageBoxWidth = function(){
// if($(window).width()<993){
// $("#projectManageBox").css("cssText", "margin-left:0px !important");
// $("#projectManageBox").width($(window).width())
// }else{
// $("#projectManageBox").css("cssText", "margin-left:260px !important");
// $("#projectManageBox").width($(window).width()-260)
// }
    };
    
    scope.hideCreatePumpForm = function() {
    	hideCreatePumpForm()
    },

    scope.create = function(currentArea) {
    	http.get("auth/user-data.jspx").success(function(response) {
    		scope.currentArea = currentArea,
    		scope.users = response.data,
    		scope.types = [{"name":"居民"},{"name":"农业"},{"name":"大工业"},{"name":"商业"}],
            scope.project = {},
            scope.cmd = 'create',
            showCreatForm()
    	});
    },
    
    scope.save = function() {
    	scope.project.ownerId = scope.users.selected.userId,
    	scope.project.ownerName = scope.users.selected.userName,
    	scope.project.ownerPhoneNo = scope.users.selected.userPhone,
    	scope.project.ownerType = scope.types.selected.name,
    	scope.project.projectAreaId = scope.currentArea.projectAreaId;
    	"create" === scope.cmd && http({
    		method: 'post',
    		url: 'manage/add-project.jspx',
    		data: scope.project
    	}).success(function(response) {
    		if(response.success) {
    			scope.data.push(response.project),
        		hideCreateForm()
    		} else {
    			layerService.layerAlert(response.message)
    		}
    	})
    },
    
    scope.remove = function(project) {
		layerService.layerConfirm("确认要删除该项目吗？", function(){
			http.get("manage/delete-project.jspx?projectId=" + project.projectId).success(function (response) {
				layerService.layerAlert(response.message)
				if(response.success) {
					scope.data.splice(scope.data.indexOf(project), 1)
				}
			});
		})
	},
	
    scope.edit = function(project) {
		scope.types = [{"name":"居民"},{"name":"农业"},{"name":"大工业"},{"name":"商业"}],
		scope.types.selected = {"name":project.ownerType},
        scope.project = angular.copy(project),
        scope.cmd = 'update',
        showUpdateForm()
    },
    
    scope.update = function() {
    	scope.project.ownerType = scope.types.selected.name;
    	"update" === scope.cmd && http({
    		method: 'post',
    		url: 'manage/change-project.jspx',
    		data: scope.project
    	}).success(function(response) {
    		if(response.success) {
    			scope.data.forEach(function(project,index,arr){
				  if(project.projectId == response.project.projectId) {
					  arr[index] = response.project;
				  }          
				}),
        		hideUpdateForm()
    		} else {
    			layerService.layerAlert(response.message)
    		}
    	})
    },
    
    scope.manage = function(project){
    	http.get("manage/project-manage.jspx?projectId=" + project.projectId).success(function(response) {
    		if(response.success) {
    			scope.projectArea = response.projectArea,
    			scope.pumps = response.pumps,
        		scope.project = project,
        		showManageForm()
        		// setProjectManageBoxWidth();
            	// $(window).on("resize",function(){setProjectManageBoxWidth()});
    		}
    	});
    },
    
    scope.createPump = function(project){
    	http.get("manage/device-product-data.jspx").success(function(response) {
        	scope.products = response.Rs,
        	scope.pump = {
        		projectId:project.projectId,
        		installDate:new Date()
        	},
        	scope.cmd = "create",
        	showCreatePumpForm()
    	})
    },
    
	scope.editPump = function(pump){
    	http.get("manage/device-product-data.jspx").success(function(response) {
        	scope.products = response.Rs,
        	scope.pump = angular.copy(pump),
        	
        	angular.forEach(scope.products, function(product) {
    			if(product.productId == pump.productId){
    				scope.products.selected = product
    			}
            });
        	
        	scope.cmd = "update",
        	showUpdatePumpForm()
    	})
	},
    
    scope.savePump = function(){
		if(!scope.products.selected) {
			layerService.layerAlert('请选择一个热泵产品');
			return
		}
		scope.pump.productId = scope.products.selected.productId;
    	"create" === scope.cmd && http({
    		method: 'post',
    		url: 'manage/create-pump.jspx',
    		data: scope.pump
    	}).success(function(response) {
    		if(response.success) {
    			scope.pumps.push(response.pump);
    			hideCreatePumpForm()
    		} else {
    			layerService.layerAlert(response.message)
    		}
    	})
    },
    
    scope.updatePump = function(){
		scope.pump.productId = scope.products.selected.productId;
    	"update" === scope.cmd && http({
    		method: 'post',
    		url: 'manage/update-pump.jspx',
    		data: scope.pump
    	}).success(function(response) {
    		if(response.success) {
    			scope.pumps.forEach(function(pump,index,arr){
  				  if(pump.pumpId == response.pump.pumpId) {
  					  arr[index] = response.pump;
  				  }          
  				}),
    			hideUpdatePumpForm()
    		} else {
    			layerService.layerAlert(response.message)
    		}
    	})
    },
    
    scope.removePump = function(pump) {
    	pump && layerService.layerConfirm("确认要删除该热泵吗？", function(){
			http.get("manage/delete-pump.jspx?pumpId=" + pump.pumpId).success(function (response) {
				layerService.layerAlert(response.message)
				if(response.success) {
			        hideCreatePumpForm(),
			        hideUpdatePumpForm(),
					scope.pumps.splice(scope.pumps.indexOf(pump), 1)
				}
			});
		})
	}
    
    scope.$on("$destroy", function() {
    	hideAllForm(),
    	hideCreatePumpForm(),
    	hideUpdatePumpForm()
    })
	
}]),

app.controller("ProjectAreaController", ["$scope", "$http", "$aside", "layerService", function(scope, http, aside, layerService) {
	
	scope.treeOptions = {
	    nodeChildren: "children",
	    dirSelectable: true
	}
	
	http.get("manage/project-area-data.jspx").success(function (response) {
		scope.projectAreas = response.data;
	});
	
	var creatForm = aside({
        scope: scope,
        template: "tpl/form-area-create.jspx",
        show: !1,
        placement: "left",
        backdrop: true
    }),
    showCreatForm = function() {
        angular.element(".tooltip").remove(),
        creatForm.show()
    },
    hideCreateForm = function() {
    	creatForm.hide()
    };
	
	scope.create = function(parentArea){
		http.get("manage/child-area-data.jspx?parentCode=" + parentArea.areaCode).success(function (response) {
			if(response.data.length>0) {
				scope.parentArea = parentArea,
				scope.childAreas = response.data,
				scope.cmd = "create",
				showCreatForm();
			} else {
				layerService.layerAlert("已无子级区域，不可再新增子级区域。<br/>扩充数据请联系管理员。")
			}
		});
	}
	
	scope.save = function() {
		var newArea = scope.childAreas.selected, area = {};
		area.areaName = newArea.areaName;
		area.areaCode = newArea.areaCode;
		area.weatherCode = newArea.areaWeatherCode;
		area.parentAreaCode = scope.parentArea.areaCode;
    	"create" === scope.cmd && http({
    		method: 'post',
    		url: 'manage/add-child-area.jspx',
    		data: area
    	}).success(function(response) {
    		if(response.success) {
    			scope.parentArea.children.push(response.area);
        		hideCreateForm()
    		} else {
    			layerService.layerAlert(response.message)
    		}
    	})
    }
	
	scope.remove = function(currentNode) {
		layerService.layerConfirm("确认要删除该区域吗？", function(){
			http.get("manage/delete-area.jspx?areaCode=" + currentNode.areaCode).success(function (response) {
				layerService.layerAlert(response.message)
				if(response.success) {
					http.get("manage/project-area-data.jspx").success(function (response) {
						scope.currentNode = null;
						scope.projectAreas = response.data;
					})
				}
			});
		})
	}
    
	scope.$on("$destroy", function() {
		hideCreateForm()
    })
}]),

app.controller("DeviceProductController", ["$rootScope", "$scope", "$http", "$aside", "layerService","localStorageService", function(rootScope, scope, http, aside, layerService,localStorage) {
	rootScope.pageTitle = "产品管理",
	scope.tabFlag = localStorage.get('DeviceProductController_tabFlag') || 'R',
	scope.changeTab = function(flag) {
		scope.tabFlag=flag;
		localStorage.set('DeviceProductController_tabFlag', flag);
		localStorage.bind(scope, "DeviceProductController_tabFlag");
	}
	
	http.get("manage/device-product-data.jspx").success(function(response) {
		scope.CsData = response.Cs,
		scope.RsData = response.Rs
	})
	
	var createForm = aside({
	    scope: scope,
	    template: "tpl/form-device-product-create.jspx",
	    show: !1,
	    placement: "left",
	    backdrop: true
	}),
	updateForm = aside({
	    scope: scope,
	    template: "tpl/form-device-product-update.jspx",
	    show: !1,
	    placement: "left",
	    backdrop: true
	}),
	detailForm = aside({
	    scope: scope,
	    template: "tpl/form-device-product-detail.jspx",
        animation: "am-fade-and-slide-top",
        show: !1,
        backdrop: true
	}),
    showCreateForm = function() {
        angular.element(".tooltip").remove(),
        hideAllForm(),
        createForm.show()
    },
    hideCreateForm = function() {
    	createForm.hide()
    },
    showUpdateForm = function() {
        angular.element(".tooltip").remove(),
        hideAllForm(),
        updateForm.show()
    },
    hideUpdateForm = function() {
    	updateForm.hide()
    },
    showDetailForm = function() {
        angular.element(".tooltip").remove(),
        hideAllForm(),
        detailForm.show()
    },
    hideDetailForm = function() {
    	detailForm.hide()
    },
    hideAllForm = function() {
    	hideCreateForm(),
    	hideUpdateForm(),
    	hideDetailForm()
    };
    
    scope.create = function(){
    	http.get("manage/device-vender-data.jspx").success(function(response) {
    		scope.product = {
	    		productType:"R"
	    	},
	    	scope.cmd = "create",
    		scope.deviceVenders = response.data,
    		showCreateForm();
    	})
	}
    
    scope.changeType = function(productType){
    	scope.product.productType = productType
	}
    
    scope.save = function() {
    	scope.product.productVenderId = scope.deviceVenders.selected.venderId;
    	"create" === scope.cmd && http({
    		method: 'post',
    		url: 'manage/create-device-product.jspx',
    		data: scope.product
    	}).success(function(response) {
    		if(response.success) {
    			if("R" == response.deviceProduct.productType) {
        			scope.RsData.push(response.deviceProduct)
    			} else {
    				scope.CsData.push(response.deviceProduct)
    			}
    			hideCreateForm()
    		} else {
    			layerService.layerAlert(response.message)
    		}
    	})
    }
    
    scope.edit = function(product){
    	http.get("manage/device-vender-data.jspx").success(function(response) {
    		scope.cmd = "update",
        	scope.product = angular.copy(product),
    		scope.deviceVenders = response.data,
    		scope.productType = scope.product.productType == 'R',
    		
    		angular.forEach(scope.deviceVenders, function(vender) {
    			if(vender.venderId == product.productVenderId){
    				scope.deviceVenders.selected = vender
    			}
            });
    		
    		showUpdateForm();
    	})
	}

    scope.update = function() {
    	scope.product.productVenderId = scope.deviceVenders.selected.venderId;
    	"update" === scope.cmd && http({
    		method: 'post',
    		url: 'manage/update-device-product.jspx',
    		data: scope.product
    	}).success(function(response) {
    		if(response.success) {
    			if("R" == scope.product.productType) {
    				scope.RsData.forEach(function(product,index,arr){
	  				  if(product.productId == response.deviceProduct.productId) {
	  					  arr[index] = response.deviceProduct;
	  				  }
	  				})
    			} else {
    				scope.CsData.forEach(function(product,index,arr){
  	  				  if(product.productId == response.deviceProduct.productId) {
  	  					  arr[index] = response.deviceProduct;
  	  				  }
  	  				})
    			}
    			hideUpdateForm()
    		} else {
    			layerService.layerAlert(response.message)
    		}
    	})
    }
    
    scope.detail = function(product) {
    	scope.product = product,showDetailForm()
    }
    
    scope.remove = function(product) {
    	product && layerService.layerConfirm("确认要删除该产品吗？", function(){
    		http({
        		method: 'post',
        		url: 'manage/delete-device-product.jspx?productId=' + product.productId
        	}).success(function(response) {
        		if(response.success) {
        			if("R" == product.productType){
        				scope.RsData.splice(scope.RsData.indexOf(product), 1)
        			} else {
        				scope.CsData.splice(scope.CsData.indexOf(product), 1)
        			}
        			layerService.layerAlert("删除成功")
        		} else {
        			layerService.layerAlert(response.message)
        		}
        	})
    	})
    }
    
    scope.$on("$destroy", function() {
    	hideAllForm()
    })
}]),
app.controller("DeviceVenderController", ["$rootScope", "$scope", "$http", "$aside", "layerService", function(rootScope, scope, http, aside, layerService) {
	rootScope.pageTitle = "设备厂家",
	http.get("manage/device-vender-data.jspx").success(function(response) {
		scope.data = response.data
	})
	var createForm = aside({
	    scope: scope,
	    template: "tpl/form-device-vender-create.jspx",
	    show: !1,
	    placement: "left",
	    backdrop: true
	}),
	updateForm = aside({
	    scope: scope,
	    template: "tpl/form-device-vender-update.jspx",
	    show: !1,
	    placement: "left",
	    backdrop: true
	}),
	detailForm = aside({
	    scope: scope,
	    template: "tpl/form-device-vender-detail.jspx",
	    show: !1,
	    placement: "left",
	    backdrop: true
	}),
    showCreateForm = function() {
        angular.element(".tooltip").remove(),
        hideAllForm(),
        createForm.show()
    },
    hideCreateForm = function() {
    	createForm.hide()
    },
    showUpdateForm = function() {
        angular.element(".tooltip").remove(),
        hideAllForm(),
        updateForm.show()
    },
    hideUpdateForm = function() {
    	updateForm.hide()
    },
    showDetailForm = function() {
        angular.element(".tooltip").remove(),
        hideAllForm(),
        detailForm.show()
    },
    hideDetailForm = function() {
    	detailForm.hide()
    },
    hideAllForm = function() {
    	hideCreateForm(),
    	hideUpdateForm(),
    	hideDetailForm()
    };
    
    scope.create = function(){
    	scope.vender = {},
    	scope.cmd = "create",
        showCreateForm();
	}
    
    scope.save = function() {
    	"create" === scope.cmd && http({
    		method: 'post',
    		url: 'manage/create-device-vender.jspx',
    		data: scope.vender
    	}).success(function(response) {
    		if(response.success) {
    			scope.data.push(response.deviceVender);
    			hideCreateForm()
    		} else {
    			layerService.layerAlert(response.message)
    		}
    	})
    }
    
    scope.edit = function(vender){
    	scope.cmd = "update",
    	scope.vender = angular.copy(vender),
        showUpdateForm();
	}

    scope.update = function() {
    	"update" === scope.cmd && http({
    		method: 'post',
    		url: 'manage/update-device-vender.jspx',
    		data: scope.vender
    	}).success(function(response) {
    		if(response.success) {
    			scope.data.forEach(function(vender,index,arr){
  				  if(vender.venderId == response.deviceVender.venderId) {
  					  arr[index] = response.deviceVender;
  				  }          
  				}),
    			hideUpdateForm()
    		} else {
    			layerService.layerAlert(response.message)
    		}
    	})
    }

    scope.remove = function(vender) {
    	vender && layerService.layerConfirm("确认要删除该厂家吗？", function(){
    		http({
        		method: 'post',
        		url: 'manage/delete-device-vender.jspx?venderId=' + vender.venderId
        	}).success(function(response) {
        		if(response.success) {
        			scope.data.splice(scope.data.indexOf(vender), 1),
        			layerService.layerAlert("删除成功")
        		} else {
        			layerService.layerAlert(response.message)
        		}
        	})
    	})
    }
    
    scope.detail = function(vender) {
    	scope.vender = vender,showDetailForm()
    }
    
    scope.$on("$destroy", function() {
    	hideAllForm()
    })
}]),

app.controller("WarnGroupController", ["$scope", "$http", "$aside", "$timeout", "layerService", function(scope, http, aside, timeout, layerService) {
	
	timeout(function(){
		http.get("monitor/warn-group-data.jspx").success(function (response) {
			if(response.success) {
				scope.data = response.data;
			} else {
				layerService.layerAlert(response.message)
			}
		})
	}, 10)
	
	var createForm = aside({
        scope: scope,
        template: "tpl/form-warn-group-create.jspx",
        show: !1,
        placement: "left",
        backdrop: true
    }),
    updateForm = aside({
        scope: scope,
        template: "tpl/form-warn-group-update.jspx",
        show: !1,
        placement: "left",
        backdrop: true
    }),
    itemsForm = aside({
        scope: scope,
        template: "tpl/form-warn-group-items.jspx",
        show: !1,
        placement: "left",
        backdrop: true
    }),
    createItemForm = aside({
        scope: scope,
        template: "tpl/form-warn-group-item-create.jspx",
        animation: "am-fade-and-slide-top",
        show: !1,
        backdrop: true
    }),
    updateItemForm = aside({
        scope: scope,
        template: "tpl/form-warn-group-item-update.jspx",
        animation: "am-fade-and-slide-top",
        show: !1,
        backdrop: true
    })
    
    showCreateForm = function() {
        angular.element(".tooltip").remove(),
        hideAllForm(),
        createForm.show()
    },
    hideCreateForm = function() {
    	createForm.hide()
    },
    showUpdateForm = function() {
        angular.element(".tooltip").remove(),
        hideAllForm(),
        updateForm.show()
    },
    hideUpdateForm = function() {
    	updateForm.hide()
    },
    showItemsForm = function() {
        angular.element(".tooltip").remove(),
        hideAllForm(),
        itemsForm.show()
    },
    hideItemsForm = function() {
    	itemsForm.hide(),
		createItemForm.hide(),
		updateItemForm.hide()
    },
    hideAllForm = function() {
    	itemsForm.hide(),
    	updateForm.hide(),
    	createForm.hide(),
    	updateItemForm.hide()
    };

    scope.create = function(){
    	scope.cmd = 'create', scope.warnGroup = {}, showCreateForm()
    }
    
    scope.save = function(){
    	"create" === scope.cmd && http({
    		method: 'post',
    		url: 'monitor/save-warn-group.jspx',
    		data: scope.warnGroup
    	}).success(function(response) {
			layerService.layerAlert(response.message)
    		if(response.success) {
    			scope.data.push(response.warnGroup);
        		hideCreateForm()
    		}
    	})
    }
    
    scope.edit = function(warnGroup){
    	scope.cmd = 'update', scope.warnGroup = warnGroup, showUpdateForm()
    }
    
    scope.update = function(){
    	"update" === scope.cmd && http({
    		method: 'post',
    		url: 'monitor/update-warn-group.jspx',
    		data: scope.warnGroup
    	}).success(function(response) {
			layerService.layerAlert(response.message)
    		if(response.success) {
    			scope.data.forEach(function(warnGroup,index,arr){
				  if(warnGroup.groupId == response.warnGroup.groupId) {
					  arr[index] = response.warnGroup;
				  }
				}),
        		hideUpdateForm()
    		}
    	})
    }
    
    scope.remove = function(warnGroup) {
    	warnGroup && layerService.layerConfirm("确认要删除该告警组吗？", function(){
			http.get("monitor/delete-warn-group.jspx?warnGroupId=" + warnGroup.groupId).success(function (response) {
				layerService.layerAlert(response.message)
				if(response.success) {
					scope.data.splice(scope.data.indexOf(warnGroup), 1)
				}
			});
		})
	}
    
    scope.warnItems = function(warnGroup){
    	warnGroup && http.get("monitor/warn-group-items.jspx?warnGroupId=" + warnGroup.groupId).success(function (response) {
			if(response.success) {
				scope.items = response.data,
				scope.currentWarnGroup = warnGroup,
		    	showItemsForm()
			} else {
				layerService.layerAlert(response.message)
			}
		});
    }

    scope.warnMonitorItems = [{name:'回水温度',code:'back_water_temp'},{name:'出水温度',code:'out_water_temp'},{name:'环境温度',code:'environment_temp'},{name:'压缩机电流',code:'compressor_current'},{name:'水箱温度',code:'water_tank_temp'},{name:'回气温度',code:'back_air_temp'},{name:'排气温度',code:'out_air_temp'},{name:'室内温度',code:'indoor_temp'}];
    scope.warnOperatorItems = [{name:'大于', value:'>'},{name:'小于', value:'<'},{name:'等于', value:'='},{name:'大于等于', value:'≥'},{name:'小于等于', value:'≤'}];
    scope.warnLevelItems = ['信息','告警','故障'];
    
    scope.createItem = function(warnGroupId) {
    	scope.cmd = "createItem",
    	scope.warnGroupItem = {warnGroupId:warnGroupId},
    	scope.warnLevelItems.selected = '通知',
    	scope.warnMonitorItems.selected = {name:'回水温度',code:'back_water_temp'},
    	scope.warnOperatorItems.selected = {name:'大于', value:'>'};
    	warnGroupId && createItemForm.show()
    }
    
    scope.saveItem = function(){
    	"createItem" === scope.cmd && (
    		scope.warnGroupItem.itemName = scope.warnMonitorItems.selected.name,
    		scope.warnGroupItem.itemCode = scope.warnMonitorItems.selected.code,
    		scope.warnGroupItem.itemOperators = scope.warnOperatorItems.selected.value,
    		scope.warnGroupItem.warnLevel = scope.warnLevelItems.selected,
    		http({
	    		method: 'post',
	    		url: 'monitor/save-warn-group-item.jspx',
	    		data: scope.warnGroupItem
	    	}).success(function(response) {
				layerService.layerAlert(response.message)
	    		if(response.success) {
	    			scope.items.push(response.warnGroupItem);
	    			createItemForm.hide()
	    		}
	    	})
	    )
    }
    
    scope.editItem = function(warnGroupItem){
    	scope.warnGroupItem = angular.copy(warnGroupItem),
    	scope.warnLevelItems.selected = scope.warnGroupItem.warnLevel,
    	scope.warnMonitorItems.selected = {name:scope.warnGroupItem.itemName,code:scope.warnGroupItem.itemCode},
    	angular.forEach(scope.warnOperatorItems, function(item) {
			if(item.value == scope.warnGroupItem.itemOperators){
				scope.warnOperatorItems.selected = item
			}
        });
    	scope.cmd = 'updateItem', updateItemForm.show()
    }

    scope.updateItem = function(){
    	if('updateItem' === scope.cmd) {
    		scope.warnGroupItem.itemName = scope.warnMonitorItems.selected.name,
    		scope.warnGroupItem.itemCode = scope.warnMonitorItems.selected.code,
    		scope.warnGroupItem.itemOperators = scope.warnOperatorItems.selected.value,
    		scope.warnGroupItem.warnLevel = scope.warnLevelItems.selected;
    		http({
	    		method: 'post',
	    		url: 'monitor/update-warn-group-item.jspx',
	    		data: scope.warnGroupItem
	    	}).success(function(response) {
				layerService.layerAlert(response.message)
	    		if(response.success) {
	    			scope.items.forEach(function(item,index,arr){
	  				  if(item.itemId == response.warnGroupItem.itemId) {
	  					  arr[index] = response.warnGroupItem
	  				  }          
	  				}),
	    			updateItemForm.hide()
	    		}
	    	})
    	}
    }
    
    scope.removeItem = function(warnGroupItem) {
    	warnGroupItem && layerService.layerConfirm("确认要删除该告警项吗？", function(){
			http.get("monitor/delete-warn-group-item.jspx?warnGroupItemId=" + warnGroupItem.itemId).success(function (response) {
				layerService.layerAlert(response.message)
				if(response.success) {
					scope.items.splice(scope.items.indexOf(warnGroupItem), 1)
				}
			});
		})
	}
    
	scope.$on("$destroy", function() {
		hideAllForm(),
		createItemForm.hide()
    })
}]),

app.controller("ConsumptionController", ["$scope", "$http", "$aside", "layerService", "localStorageService", function(scope, http, aside, layerService, localStorage) {
	scope.tabFlag = localStorage.get('ConsumptionController_tabFlag') || 'hour',
	scope.currentDate = new Date(),
	scope.changeTab = function(flag) {
		scope.tabFlag=flag;
		localStorage.set('ConsumptionController_tabFlag', flag);
		localStorage.bind(scope, "ConsumptionController_tabFlag");
	}
}]),

app.controller("ConservationController", ["$scope", "$http", "$aside", "layerService", function(scope, http, aside, layerService) {
	
}]),

app.controller("SupportController", ["$scope", "$http", "$aside", "$timeout", "layerService", function(scope, http, aside, timeout, layerService) {
	
	var currentPage = 1;
	
	scope.currentType = {};
	
    var createTypeForm = aside({
        scope: scope,
        template: "tpl/form-support-type-create.jspx",
        animation: "am-fade-and-slide-top",
        show: !1,
        backdrop: true
    }),
    
    changeTypeForm = aside({
        scope: scope,
        template: "tpl/form-support-type-change.jspx",
        animation: "am-fade-and-slide-top",
        show: !1,
        backdrop: true
    }),
    
    createArticleForm = aside({
        scope: scope,
        template: "tpl/form-support-article-create.jspx",
        animation: "am-fade-and-slide-top",
        show: !1,
        backdrop: true
    }),
    
    changeArticleForm = aside({
        scope: scope,
        template: "tpl/form-support-article-change.jspx",
        animation: "am-fade-and-slide-top",
        show: !1,
        backdrop: true
    }),
    
    articleDetailForm = aside({
        scope: scope,
        template: "tpl/form-support-article-detail.jspx",
        animation: "am-fade-and-slide-top",
        show: !1,
        backdrop: true
    })
	
	http.get("support/type-data.jspx").success(function (response) {
		scope.types = response.data;
		scope.currentType = scope.types[0];
		showArticle(scope.types[0].knowledgeTypeId, 1);
	})
	
	scope.showCreateTypeForm = function() {
    	scope.knowledgeType = {
    		knowledgeTypeName : ''
    	},
    	createTypeForm.show()
	}

	scope.showChangeTypeForm = function(knowledgeType) {
		scope.knowledgeType = angular.copy(knowledgeType),
		changeTypeForm.show()
	}
	
	scope.saveKnowledgeType = function() {
    	if(!scope.knowledgeType.knowledgeTypeName) {
    		layerService.layerAlert("请输入类别名称");
    		return;
    	}
    	http({
    		method: 'post',
    		url: 'support/add-type.jspx',
    		data: scope.knowledgeType
    	}).success(function(response) {
			layerService.layerAlert(response.message)
    		if(response.success) {
    			scope.types.push(response.knowledgeType);
    			createTypeForm.hide()
    		}
    	})
	}
	
	scope.updateKnowledgeType = function(){
		if(!scope.knowledgeType.knowledgeTypeName) {
    		layerService.layerAlert("请输入类别名称");
    		return;
    	}
		http({
    		method: 'post',
    		url: 'support/update-type.jspx',
    		data: scope.knowledgeType
    	}).success(function(response) {
			layerService.layerAlert(response.message)
    		if(response.success) {
    			scope.types.forEach(function(type,index,arr){
				  if(type.knowledgeTypeId == response.knowledgeType.knowledgeTypeId) {
					  arr[index] = response.knowledgeType;
				  }
				}),
    			changeTypeForm.hide()
    		}
    	})
	}
	
	scope.delKnowledgeType = function(knowledgeType) {
		knowledgeType && layerService.layerConfirm("确认要删除该分类吗？", function(){
    		http({
        		method: 'post',
        		url: 'support/del-type.jspx?knowledgeTypeId=' + knowledgeType.knowledgeTypeId
        	}).success(function(response) {
    			layerService.layerAlert(response.message)
        		if(response.success) {
        			http.get("support/type-data.jspx").success(function (response2) {
        				scope.types = response2.data;
        			});
        			changeTypeForm.hide()
        		}
        	})
    	})
	}

	scope.showTypeArticles = function(typeId) {
		currentPage = 1;
		showArticle(typeId, currentPage++);
		scope.types.forEach(function(type,index,arr){
		  if(type.knowledgeTypeId == typeId) {
			  scope.currentType = type;
			  return
		  }
		})
	}
	
	var editorObj;
	
	scope.showCreateArticleForm = function(){
		createArticleForm.show();
		scope.knowledge = {
			knowledgeTypeId : scope.currentType.knowledgeTypeId
		};
		timeout(function(){
			editorObj = new nicEditor({
				buttonList : ['link','unlink','ol','ul','fontSize','fontFormat','hr','bold','italic','underline','left','center','right','justify','indent','outdent','forecolor','bgcolor','image','xhtml'],
				maxHeight : 160
			}).panelInstance('articleContent');
		})
	};
	
	scope.showChangeArticleForm = function(knowledgeId){
		http.get("support/article-detail.jspx?knowledgeId=" + knowledgeId).success(function (response) {
			scope.article = response.knowledge;
			changeArticleForm.show();
			timeout(function(){
				editorObj = new nicEditor({
					buttonList : ['link','unlink','ol','ul','fontSize','fontFormat','hr','bold','italic','underline','left','center','right','justify','indent','outdent','forecolor','bgcolor','image','xhtml'],
					maxHeight : 160
				}).panelInstance('articleContent');
			})
		})
	};
	
	function showArticle(typeId, page) {
		http.get("support/type-article-data.jspx?typeId=" + typeId + "&page=" + page).success(function (response) {
			scope.articles = response.data;
			timeout(function(){
				$(".p-title").unbind();
				$(".p-title").hover(function(){
					$(this).children("button").each(function(){$(this).show()});
				},function(){
					$(this).children("button").each(function(){$(this).hide()});
				})
			},10)
		})
	}
	
	scope.saveKnowledge = function(){
		scope.knowledge.knowledgeContent = $(".nicEdit-main").html();
		http({
    		method: 'post',
    		url: 'support/save-article.jspx',
    		data: scope.knowledge
    	}).success(function(response) {
			layerService.layerAlert(response.message)
    		if(response.success) {
    			scope.articles.unshift(response.knowledge);
    			createArticleForm.hide();
    			timeout(function(){
    				$(".p-title").unbind();
    				$(".p-title").hover(function(){
    					$(this).children("button").each(function(){$(this).show()});
    				},function(){
    					$(this).children("button").each(function(){$(this).hide()});
    				})
    			},10)
    		}
    	})
	}
	
	scope.updateKnowledge = function(){
		scope.article.knowledgeContent = $(".nicEdit-main").html();
		http({
    		method: 'post',
    		url: 'support/update-article.jspx',
    		data: scope.article
    	}).success(function(response) {
			layerService.layerAlert(response.message)
    		if(response.success) {
    			scope.articles.forEach(function(article,index,arr){
				  if(article.knowledgeId == response.knowledge.knowledgeId) {
					  arr[index] = response.knowledge;
				  }
				})
    			changeArticleForm.hide();
    			timeout(function(){
    				$(".p-title").unbind();
    				$(".p-title").hover(function(){
    					$(this).children("button").each(function(){$(this).show()});
    				},function(){
    					$(this).children("button").each(function(){$(this).hide()});
    				})
    			},10)
    		}
    	})
	}
	
	scope.showArticleDetail = function(knowledgeId){
		http.get("support/article-detail.jspx?knowledgeId=" + knowledgeId).success(function (response) {
			scope.article = response.knowledge;
			articleDetailForm.show();
		})
	}
	
	scope.removeArticle = function(knowledgeId){
		layerService.layerConfirm("确认要删除该文章吗？", function(){
			http.get("support/delete-article.jspx?knowledgeId=" + knowledgeId).success(function (response) {
				layerService.layerAlert(response.message);
				if(response.success) {
					scope.articles.forEach(function(article,index,arr){
					  if(article.knowledgeId == knowledgeId) {
						  scope.articles.splice(index, 1)
					  }
					})
				}
			})
		})
	}

	scope.$on("$destroy", function() {
		createTypeForm.hide(),
		changeTypeForm.hide(),
		createArticleForm.hide(),
		changeArticleForm.hide()
    })
}]),

app.controller("RepairController", ["$scope", "$http", "$aside", "layerService", "Upload", function(scope, http, aside, layerService, upload) {
    scope.uploadImg = function () {
    	if (!scope.form.file.$valid || !scope.file) {
    		layerService.layerAlert("无效的文件");
    		return;
    	}
    	if(scope.file.type.indexOf("image") !== 0){
    		layerService.layerAlert("无效的文件类型");
    		return;
    	}
    	if(scope.file.size > 2 * 1024 * 1024){
    		layerService.layerAlert("文件大小超过2M限制");
    		return;
    	}
        upload.upload({
            url: 'file/upload-img.jspx',
            data: {file: scope.file, groupId: "groupId"}
        }).then(function (resp) {
            console.log(resp.config.data.file);
        	layerService.layerAlert(resp.data.message);
            if(resp.data.success) {
            	console.info(resp.data.res)
            }
        }, function (resp) {
        	layerService.layerAlert("上传失败");
            console.log('Error status: ' + resp.status);
        }, function (evt) {
        	console.info(evt)
            var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
            console.log('progress: ' + progressPercentage + '% ' + evt.config.data.file.name);
        });
    };
}]),

app.controller("HandlingController", ["$scope", "$http", "$aside", "layerService", "localStorageService", function(scope, http, aside, layerService, localStorage) {
	var detailForm = aside({
        scope: scope,
        template: "tpl/form-trouble-detail.jspx",
        show: !1,
        placement: "left",
        backdrop: true
    }),
    showDetailForm = function() {
        angular.element(".tooltip").remove(),
        detailForm.hide(),
        detailForm.show()
    },
    hideDetailForm = function() {
    	detailForm.hide()
    };
	
	scope.tabFlag = localStorage.get('HandlingController_tabFlag') || 'N',
	scope.changeTab = function(flag) {
		scope.tabFlag=flag;
		localStorage.set('HandlingController_tabFlag', flag);
		localStorage.bind(scope, "HandlingController_tabFlag");
	},
	scope.detail = function(){
		
	}
}]),

app.controller("AreaWeatherController", ["$scope", "$http", "$aside", "layerService", "localStorageService", function(scope, http, aside, layerService, localStorage) {
	scope.citys =[{code:'CN101010100',name:'北京',pinyin:'beijing'},{code:'CN101010200',name:'海淀',pinyin:'haidian'},{code:'CN101010300',name:'朝阳',pinyin:'chaoyang'},{code:'CN101010400',name:'顺义',pinyin:'shunyi'},{code:'CN101010500',name:'怀柔',pinyin:'huairou'},{code:'CN101010600',name:'通州',pinyin:'tongzhou'},{code:'CN101010700',name:'昌平',pinyin:'changping'},{code:'CN101010800',name:'延庆',pinyin:'yanqing'},{code:'CN101010900',name:'丰台',pinyin:'fengtai'},{code:'CN101011000',name:'石景山',pinyin:'shijingshan'},{code:'CN101011100',name:'大兴',pinyin:'daxing'},{code:'CN101011200',name:'房山',pinyin:'fangshan'},{code:'CN101011300',name:'密云',pinyin:'miyun'},{code:'CN101011400',name:'门头沟',pinyin:'mentougou'},{code:'CN101011500',name:'平谷',pinyin:'pinggu'}]
	scope.change = function(){
		scope.weatherData = !1,scope.alarmData=!1,
		http.get("weather/area-weather-data.jspx?cityCode=" + scope.citys.selected.code).success(function (response) {
			scope.weatherData = response.weather,
			scope.alarmData = response.alarm
		});
	},
	scope.refresh = function(){
		http.get("weather/refresh-weather-data.jspx").success(function (response) {
			layerService.layerAlert(response.message),
			scope.change()
		});
	}
}]),

app.controller("WeatherWarningController", ["$scope", "$http", "$aside", "layerService", "localStorageService", function(scope, http, aside, layerService, localStorage) {
	scope.citys =[{code:'CN101010100',name:'北京',pinyin:'beijing'},{code:'CN101010200',name:'海淀',pinyin:'haidian'},{code:'CN101010300',name:'朝阳',pinyin:'chaoyang'},{code:'CN101010400',name:'顺义',pinyin:'shunyi'},{code:'CN101010500',name:'怀柔',pinyin:'huairou'},{code:'CN101010600',name:'通州',pinyin:'tongzhou'},{code:'CN101010700',name:'昌平',pinyin:'changping'},{code:'CN101010800',name:'延庆',pinyin:'yanqing'},{code:'CN101010900',name:'丰台',pinyin:'fengtai'},{code:'CN101011000',name:'石景山',pinyin:'shijingshan'},{code:'CN101011100',name:'大兴',pinyin:'daxing'},{code:'CN101011200',name:'房山',pinyin:'fangshan'},{code:'CN101011300',name:'密云',pinyin:'miyun'},{code:'CN101011400',name:'门头沟',pinyin:'mentougou'},{code:'CN101011500',name:'平谷',pinyin:'pinggu'}],
	scope.levels =[{name:'蓝色'},{name:'黄色'},{name:'橙色'},{name:'红色'}],
	scope.types =[{name:'台风'},{name:'暴雨'},{name:'暴雪'},{name:'寒潮'},{name:'大风'},{name:'沙尘暴'},{name:'高温'},{name:'干旱'},{name:'雷电'},{name:'冰雹'},{name:'霜冻'},{name:'霾'},{name:'道路结冰'},{name:'寒冷'},{name:'灰霾'},{name:'雷电大风'},{name:'森林火险'},{name:'降温'},{name:'道路冰雪'},{name:'干热风'},{name:'低温'},{name:'冰冻'}];

	scope.releaseWeatherWarn = function(){
		var city = scope.citys.selected;
		var level = scope.levels.selected;
		var type = scope.types.selected;
		if(!city) {
			layerService.layerAlert('请选择一个区域');
			return;
		}
		if(!type) {
			layerService.layerAlert('请选择一个类别');
			return;
		}
		if(!level) {
			layerService.layerAlert('请选择一个级别');
			return;
		}
		http({
    		method: 'post',
    		url: 'weather/add-weather-early-warning-data.jspx',
    		data: {
    			weatherCityCode : city.code,
    			earlyWarnLevel : level.name,
    			earlyWarnType : type.name,
    			earlyWarnTitle : scope.earlyWarnTitle,
    			earlyWarnTxt : scope.earlyWarnTxt
    		}
    	}).success(function(response) {
			layerService.layerAlert(response.message)
    		if(response.success) {
    			scope.citys.selected = {},
    			scope.levels.selected = {},
    			scope.types.selected = {},
    			scope.earlyWarnTitle = '',
    			scope.earlyWarnTxt = ''
    		}
    	})
	}
	
}]),

app.controller("WeatherSystemSetController", ["$scope", "$http", "layerService", function(scope, http, layerService) {
	
	http.get("weather/system-set-data.jspx").success(function (response) {
		scope.key1 = response.key1,
		scope.key2 = response.key2
	});
	
	scope.changeWeatherSystemSet = function(){
		http({
    		method: 'post',
    		url: 'weather/update-system-set-data.jspx',
    		data: {
    			key1: scope.key1,
    			key2: scope.key2
    		}
    	}).success(function(response) {
			layerService.layerAlert(response.message)
    	})
	}
}]);